<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>云计算综合实训1linux命令</title>
      <link href="/2023/05/10/%E4%BA%91%E8%AE%A1%E7%AE%97%E7%BB%BC%E5%90%88%E5%AE%9E%E8%AE%AD1linux%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/05/10/%E4%BA%91%E8%AE%A1%E7%AE%97%E7%BB%BC%E5%90%88%E5%AE%9E%E8%AE%AD1linux%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h2><blockquote><p>本人曾经接触过linux，也做过相应的前端开发，所以实验平台选择的是我众多服务器中的一台linux服务器，为了舍弃繁琐的输入 我直接用了echo 再用管道符将前一命令输入作为后面命令输出</p></blockquote><p>实验平台</p><blockquote><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230509234727785.png" alt="image-20230509234727785"></p></blockquote><h3 id="1-修改下root密码，变为123456"><a href="#1-修改下root密码，变为123456" class="headerlink" title="1.修改下root密码，变为123456"></a>1.修改下root密码，变为123456</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;123456&quot; | passwd --stdin root</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230509235748480.png" alt="image-20230509235748480"></p><h3 id="2-创建一个用户，用户的名字就是大家自己名字的首字母简拼（lijianye"><a href="#2-创建一个用户，用户的名字就是大家自己名字的首字母简拼（lijianye" class="headerlink" title="2.创建一个用户，用户的名字就是大家自己名字的首字母简拼（lijianye)"></a>2.创建一个用户，用户的名字就是大家自己名字的首字母简拼（lijianye)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd ljy</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230509235809319.png" alt="image-20230509235809319"></p><h3 id="3-为创建的这个用户给个密码123456"><a href="#3-为创建的这个用户给个密码123456" class="headerlink" title="3.为创建的这个用户给个密码123456"></a>3.为创建的这个用户给个密码123456</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;123456&quot; | passwd --stdin ljy</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230509235854582.png" alt="image-20230509235854582"></p><h3 id="4-切换到lijianye这个用户下"><a href="#4-切换到lijianye这个用户下" class="headerlink" title="4.切换到lijianye这个用户下"></a>4.切换到lijianye这个用户下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - ljy</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230509235930226.png" alt="image-20230509235930226"></p><h3 id="5-切换到lijianye这个家目录下"><a href="#5-切换到lijianye这个家目录下" class="headerlink" title="5.切换到lijianye这个家目录下"></a>5.切换到lijianye这个家目录下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230510000044176.png" alt="image-20230510000044176"></p><h3 id="6-复制-x2F-etc-x2F-passwd文件到张三的加目录下并且改名为123-txt"><a href="#6-复制-x2F-etc-x2F-passwd文件到张三的加目录下并且改名为123-txt" class="headerlink" title="6.复制&#x2F;etc&#x2F;passwd文件到张三的加目录下并且改名为123.txt"></a>6.复制&#x2F;etc&#x2F;passwd文件到张三的加目录下并且改名为123.txt</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/passwd ~/123.txt</span><br></pre></td></tr></table></figure><h3 id="7-查看一下这个123-txt的内容"><a href="#7-查看一下这个123-txt的内容" class="headerlink" title="7.查看一下这个123.txt的内容"></a>7.查看一下这个123.txt的内容</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/123.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230510000339088.png" alt="image-20230510000339088"></p><h3 id="8-查看下123-txt的文件大小和创建时间"><a href="#8-查看下123-txt的文件大小和创建时间" class="headerlink" title="8.查看下123.txt的文件大小和创建时间"></a>8.查看下123.txt的文件大小和创建时间</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lh ~/123.txt</span><br></pre></td></tr></table></figure><p>另外又把vm虚拟机下了回来，模仿老师的步骤建立了一个centos8的操作系统的虚拟机</p><p>​                               </p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker配置mysql</title>
      <link href="/2023/05/10/docker%E9%85%8D%E7%BD%AEmysql/"/>
      <url>/2023/05/10/docker%E9%85%8D%E7%BD%AEmysql/</url>
      
        <content type="html"><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h1 id="Docker安装配置mysql"><a href="#Docker安装配置mysql" class="headerlink" title="Docker安装配置mysql"></a>Docker安装配置mysql</h1><p>1.拉取docker镜像 并创建容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:8.0</span><br><span class="line">docker run --name mysqlDatabase -e MYSQL_ROOT_PASSWORD=123456 -e MYSQL_DATABASE=mydatabase -e MYSQL_USER=admin -e MYSQL_PASSWORD=123456 -p 3306:3306 -d mysql:8.0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.拉取 phpMyAdmin 镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull phpmyadmin/phpmyadmin</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用phpmyadmin打开容器的数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --name phpmyadmin --link mysqlDatabase:db -p 80:80 -d phpmyadmin/phpmyadmin</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个先不急 以后会用 </p><h2 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h2><p>参考了这篇博客 <a class="link"   href="https://gitee.com/spoto/natserver" >自建内网穿透服务器: 通过FRP，Zerotier等几种通过自己服务器实现内网穿透的教程 (gitee.com)<i class="fas fa-external-link-alt"></i></a></p><p>我真的会谢</p><p>一天真的就被着破网络搞得头大，原来docker默认的是桥接模式</p><p>最后发现原来配置要用host模式，我真的是无语</p><p>我的配置文件frpc.ini在e盘</p><blockquote><p>–network&#x3D;host </p><p>一个小小的参数 拯救了代码的红色   不改成host模式  本地主机就只会拒绝外面访问docker容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name frpc --restart=always --network=host -v E:\\frpc.ini:/etc/frp/frpc.ini snowdreamtech/frpc</span><br></pre></td></tr></table></figure><h2 id="部署我们团队的应用"><a href="#部署我们团队的应用" class="headerlink" title="部署我们团队的应用"></a>部署我们团队的应用</h2><p>部署到30端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name my-node-app -v E:\docker\demo-app:/app -p 3000:3000 -w /app node bash</span><br></pre></td></tr></table></figure><p>使用php部署一个班级文件收集表</p><h2 id="php"><a href="#php" class="headerlink" title="php"></a>php</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name uploadwebsite  -v E:\docker\uploadwebsite:/<span class="keyword">var</span>/www/html -p <span class="number">6580</span>:<span class="number">80</span> -w /<span class="keyword">var</span>/www/html php php -S <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">80</span>  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker环境配置</title>
      <link href="/2023/05/10/docker%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/05/10/docker%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h1 id="本地跑3D智慧医疗"><a href="#本地跑3D智慧医疗" class="headerlink" title="本地跑3D智慧医疗"></a>本地跑3D智慧医疗</h1><blockquote><p>亲身感觉和ai studio差不多，本地运转的时候我的内存飙到24g（还好我是32g内存），感觉ai studio也是运用了类似docker虚拟化的技术为每一个用户提供了一个镜像环境，因为磁盘100g刚好就是镜像文件+环境的大小。</p><p><strong>所以本地跑的好处是在训练速度差不多的情况下，训练时间变成了无限。而且对待各个文件好操作一点</strong></p></blockquote><h2 id="docker-环境配置"><a href="#docker-环境配置" class="headerlink" title="docker 环境配置"></a>docker 环境配置</h2><blockquote><p>c盘空间足够的可以忽略2 3 4 步骤</p></blockquote><h3 id="1-下载docker-desktop"><a href="#1-下载docker-desktop" class="headerlink" title="1.下载docker desktop"></a>1.下载docker desktop</h3><p>因为本机是window10，有些命令无法运行，所以用docker desktop是一个不错的选择</p><p>自己找教程</p><h3 id="2-更改镜像存储路径"><a href="#2-更改镜像存储路径" class="headerlink" title="2.更改镜像存储路径"></a>2.更改镜像存储路径</h3><p>放在c盘这谁受得了,放E盘</p><p>win 10 的 docker-desktop 在启动的时候，会启动两个 <code>wsl 子系统</code>: <code>docker-desktop</code> 以及 <code>docker-desktop-data</code><br>输入命令 <code>wsl -l -v --all</code> 可以看到这两个子系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wsl --shutdown</span><br><span class="line">wsl --export docker-desktop-data E:\data\docker\docker-desktop-data.tar</span><br><span class="line"></span><br><span class="line">wsl --export docker-desktop E:\data\docker\docker-desktop.tar</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到 在 <code>E:\data\docker</code> 已存放了这两个子系统的 tar 包</p><h3 id="3-注销子系统"><a href="#3-注销子系统" class="headerlink" title="3.注销子系统"></a>3.注销子系统</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wsl --unregister docker-desktop</span><br><span class="line">wsl --unregister docker-desktop-data</span><br></pre></td></tr></table></figure><h3 id="4-重新导入"><a href="#4-重新导入" class="headerlink" title="4.重新导入"></a>4.重新导入</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wsl --import docker-desktop-data E:\data\docker\docker-desktop-data E:\data\docker\docker-desktop-data.tar --version 2</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wsl --import docker-desktop E:\data\docker\docker-desktop E:\data\docker\docker-desktop.tar --version 2</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-docker安装环境"><a href="#5-docker安装环境" class="headerlink" title="5.docker安装环境"></a>5.docker安装环境</h3><p>我的建议是去搞个加速器（美国梯子好一点，亲测）</p><p>这个地址是官方给的，我从官方的docker hub下面扒了一个最新的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull paddlecloud/paddleseg:2.6-gpu-cuda11.2-cudnn8-latest</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="如何运转这个项目代码"><a href="#如何运转这个项目代码" class="headerlink" title="如何运转这个项目代码"></a>如何运转这个项目代码</h2><p>那是相当煎熬呀</p><p>挂载命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name paddle_project --gpus all -v E:\final:/paddle_project -p 8888:8888 paddlecloud/paddleseg:2.6-gpu-cuda11.2-cudnn8-latest /bin/bash</span><br></pre></td></tr></table></figure><p>下载jupyter</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyter</span><br></pre></td></tr></table></figure><blockquote><p>运行pip install 会出一些警告 直接不用管 耐心等待</p></blockquote><p>这个是在容器中使用jupyter打开官方项目的方法</p><p><strong>（不知道为啥 下面这个指令需要手动输入 很烦）</strong></p><p>启动容器后直接在终端里输入下面这些就好</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --ip 0.0.0.0 --port 8888 --no-browser --allow-root --NotebookApp.token=&#x27;&#x27; --NotebookApp.password=&#x27;&#x27; --notebook-dir=/paddle_project</span><br></pre></td></tr></table></figure><p><a class="link"   href="http://localhost:8888/" >http://localhost:8888<i class="fas fa-external-link-alt"></i></a></p><p>输入上面这个网址就可以打开容器里的jupyter用镜像里的环境操作容器里的文件了</p><p>然后剩下的和ai studio里面的一模一样</p><blockquote><p>内存空间不用担心，镜像文件在e盘，那个盘1t，随便造</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> paddleseg </category>
          
      </categories>
      
      
        <tags>
            
            <tag> paddleseg docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大创代码</title>
      <link href="/2023/03/29/%E5%A4%A7%E5%88%9B%E4%BB%A3%E7%A0%81/"/>
      <url>/2023/03/29/%E5%A4%A7%E5%88%9B%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="大创项目解读"><a href="#大创项目解读" class="headerlink" title="大创项目解读"></a>大创项目解读</h1><p>寒假时间的业余时间做了一些代码解读，至于怎么添加resnet小样本学习和fastrcnn还在研究，大部分代码是不含有专业知识的图像数据预处理，先解读以下各个文件的作用。</p><h2 id="1-fix-entra-files-py"><a href="#1-fix-entra-files-py" class="headerlink" title="1-fix-entra-files.py"></a>1-fix-entra-files.py</h2><blockquote><p>这个dirs可能就是版权声明几个人名没啥作用，没什么实际作用</p><p>这段代码的作用是：遍历一系列目录，找到以”.json”为后缀的文件，并对这些文件中的内容进行修改。</p><p>简单来说就是如果检查label 是不是 entra-dural fat需不需要重写那么就标记上</p><p>具体来说：</p><p>定义了一个名为”check_if_have_entra”的函数，该函数的输入是一个文件路径。函数的作用是读取该文件内容（期望该文件是一个json文件），查找其中的”shapes”键对应的值（预计是一个列表），遍历该列表，如果某一项的”label”键对应的值为”entra-dural fat”，则将该值改为”extra-dural fat”，并且标记该文件需要被重写。最后，如果该文件需要被重写，则将其内容写入该文件。</p><p>利用for循环遍历”dirs”列表中的每一个目录。对于每一个目录，首先获取该目录下所有文件的列表，并遍历该列表，如果当前项是一个目录，则再次获取该目录下的所有文件的列表，并遍历该列表，如果当前项的后缀是”.json”，则调用”check_if_have_entra”函数，将该文件路径作为输入。</p><p>整个代码实现了从一系列目录中寻找以”.json”为后缀的文</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, json</span><br><span class="line"></span><br><span class="line">dirs = [<span class="string">&quot;赵晓慧&quot;</span>, <span class="string">&quot;周斌&quot;</span>, <span class="string">&quot;朱恒&quot;</span>, <span class="string">&quot;王传合&quot;</span>, <span class="string">&quot;沈文堂&quot;</span>, <span class="string">&quot;李明&quot;</span>, <span class="string">&quot;鞠洪法&quot;</span>, <span class="string">&quot;江英美&quot;</span>,</span><br><span class="line"><span class="string">&quot;杜长亮&quot;</span>, <span class="string">&quot;董祥文&quot;</span>, <span class="string">&quot;陈欣&quot;</span>, <span class="string">&quot;陈胜利&quot;</span>, <span class="string">&quot;鲍雪冬&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_if_have_entra</span>(<span class="params">file_path</span>):</span><br><span class="line">file_need_write = <span class="literal">False</span></span><br><span class="line">content = json.load(<span class="built_in">open</span>(file_path, encoding=<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> content[<span class="string">&quot;shapes&quot;</span>]:</span><br><span class="line"><span class="keyword">if</span> i[<span class="string">&quot;label&quot;</span>] == <span class="string">&quot;entra-dural fat&quot;</span>:</span><br><span class="line">i[<span class="string">&quot;label&quot;</span>] = <span class="string">&quot;extra-dural fat&quot;</span></span><br><span class="line">file_need_write = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> file_need_write:</span><br><span class="line">f = <span class="built_in">open</span>(file_path, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">json.dump(content, f)</span><br><span class="line"><span class="built_in">print</span>(file_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dirs:</span><br><span class="line">dir_list = os.listdir(i)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> dir_list:</span><br><span class="line">dir_name = os.path.join(i, j)</span><br><span class="line">sub_dir_list = os.listdir(dir_name)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> sub_dir_list:</span><br><span class="line"><span class="keyword">if</span> k.split(<span class="string">&quot;.&quot;</span>)[-<span class="number">1</span>] == <span class="string">&quot;json&quot;</span>:</span><br><span class="line">file_path = os.path.join(dir_name, k)</span><br><span class="line">check_if_have_entra(file_path)</span><br></pre></td></tr></table></figure><h2 id="2-move-file-py"><a href="#2-move-file-py" class="headerlink" title="2.move-file.py"></a>2.move-file.py</h2><blockquote><p>下面的代码创建了两个目录：pic_dir 和 json_dir。如果这两个目录不存在，它们将被创建。</p><p>然后，它遍历了目录列表 dirs 中的每个目录，然后对于每个目录内的文件，调用 move_file 函数将其移动到 pic_dir 或 json_dir 目录中。move_file 函数检查文件扩展名，如果是 .jpg 则移动到 pic_dir，如果是 .json 则移动到 json_dir。移动文件是使用 shutil 库中的 move 函数实现的。 就是一个简单的移动文件的函数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, json, shutil</span><br><span class="line"></span><br><span class="line">dirs = [<span class="string">&quot;赵晓慧&quot;</span>, <span class="string">&quot;周斌&quot;</span>, <span class="string">&quot;朱恒&quot;</span>, <span class="string">&quot;王传合&quot;</span>, <span class="string">&quot;沈文堂&quot;</span>, <span class="string">&quot;李明&quot;</span>, <span class="string">&quot;鞠洪法&quot;</span>, <span class="string">&quot;江英美&quot;</span>,</span><br><span class="line"><span class="string">&quot;杜长亮&quot;</span>, <span class="string">&quot;董祥文&quot;</span>, <span class="string">&quot;陈欣&quot;</span>, <span class="string">&quot;陈胜利&quot;</span>, <span class="string">&quot;鲍雪冬&quot;</span>]</span><br><span class="line"></span><br><span class="line">pic_dir = <span class="string">&quot;pic/&quot;</span></span><br><span class="line">json_dir = <span class="string">&quot;json/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(pic_dir):</span><br><span class="line">os.mkdir(pic_dir)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(json_dir):</span><br><span class="line">os.mkdir(json_dir)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">move_file</span>(<span class="params">file_path</span>):</span><br><span class="line"><span class="keyword">if</span> file_path.split(<span class="string">&quot;.&quot;</span>)[-<span class="number">1</span>] == <span class="string">&quot;jpg&quot;</span>:</span><br><span class="line">shutil.move(file_path, pic_dir)</span><br><span class="line"><span class="keyword">elif</span> file_path.split(<span class="string">&quot;.&quot;</span>)[-<span class="number">1</span>] == <span class="string">&quot;json&quot;</span>:</span><br><span class="line">shutil.move(file_path, json_dir)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dirs:</span><br><span class="line">dir_list = os.listdir(i)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> dir_list:</span><br><span class="line">dir_name = os.path.join(i, j)</span><br><span class="line">sub_dir_list = os.listdir(dir_name)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> sub_dir_list:</span><br><span class="line">file_path = os.path.join(dir_name, k)</span><br><span class="line">move_file(file_path)</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="3-move-Chinese"><a href="#3-move-Chinese" class="headerlink" title="3.move-Chinese"></a>3.move-Chinese</h2><blockquote><p>这段代码的作用是将文件夹 “json” 和 “pic” 中的文件的文件名批量更改。所以在json目录和pic目录下经常能看到不少学长学姐的名字</p><p>首先，定义了一个字典 <code>rename_list</code>，该字典将一个人的名字映射到一个名称（用英文表示）。然后，代码读取 “json” 目录中的文件列表，并遍历该列表。对于每个文件，它将检查其文件名是否包含字典中的任何人的名字。如果找到了，它将文件名中的名字替换为该人的名称（用英文表示）。同样的方法也用于 “pic” 目录中的文件。最后，代码将处理的文件数量打印出来。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">rename_list = &#123;</span><br><span class="line"><span class="string">&quot;周斌&quot;</span>: <span class="string">&quot;zhoubin&quot;</span>,</span><br><span class="line"><span class="string">&quot;赵晓慧&quot;</span>: <span class="string">&quot;zhaoxiaohui&quot;</span>,</span><br><span class="line"><span class="string">&quot;朱恒&quot;</span>: <span class="string">&quot;zhuheng&quot;</span>,</span><br><span class="line"><span class="string">&quot;鲍雪冬&quot;</span>: <span class="string">&quot;baoxuedong&quot;</span>,</span><br><span class="line"><span class="string">&quot;王传合&quot;</span>: <span class="string">&quot;wangchuanhe&quot;</span>, </span><br><span class="line"><span class="string">&quot;沈文堂&quot;</span>: <span class="string">&quot;shenwentang&quot;</span>, </span><br><span class="line"><span class="string">&quot;李明&quot;</span>: <span class="string">&quot;liming&quot;</span>, </span><br><span class="line"><span class="string">&quot;鞠洪法&quot;</span>: <span class="string">&quot;juhongfa&quot;</span>, </span><br><span class="line"><span class="string">&quot;江英美&quot;</span>: <span class="string">&quot;jiangyingmei&quot;</span>,</span><br><span class="line"><span class="string">&quot;杜长亮&quot;</span>: <span class="string">&quot;duchangliang&quot;</span>, </span><br><span class="line"><span class="string">&quot;董祥文&quot;</span>: <span class="string">&quot;dongxiangwen&quot;</span>, </span><br><span class="line"><span class="string">&quot;陈欣&quot;</span>: <span class="string">&quot;chenxin&quot;</span>, </span><br><span class="line"><span class="string">&quot;陈胜利&quot;</span>: <span class="string">&quot;chenshengli&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">json_path = <span class="string">&quot;json/&quot;</span></span><br><span class="line">pic_path = <span class="string">&quot;pic/&quot;</span></span><br><span class="line"></span><br><span class="line">file_list = os.listdir(json_path)</span><br><span class="line"></span><br><span class="line">file_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> file_list:</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> rename_list:</span><br><span class="line"><span class="keyword">if</span> j <span class="keyword">in</span> i:</span><br><span class="line">new_name = i.replace(j, rename_list[j])</span><br><span class="line">os.rename(</span><br><span class="line">os.path.join(json_path, i),</span><br><span class="line">os.path.join(json_path, new_name)</span><br><span class="line">)</span><br><span class="line">file_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">file_list2 = os.listdir(pic_path)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> file_list2:</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> rename_list:</span><br><span class="line"><span class="keyword">if</span> j <span class="keyword">in</span> i:</span><br><span class="line">new_name = i.replace(j, rename_list[j])</span><br><span class="line">os.rename(</span><br><span class="line">os.path.join(pic_path, i),</span><br><span class="line">os.path.join(pic_path, new_name)</span><br><span class="line">)</span><br><span class="line">file_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;共处理了&#123;&#125;个文件。&quot;</span>.<span class="built_in">format</span>(file_num))</span><br></pre></td></tr></table></figure><h2 id="4-check-json-num-equ-pic-py"><a href="#4-check-json-num-equ-pic-py" class="headerlink" title="4.check-json-num-equ-pic.py"></a>4.check-json-num-equ-pic.py</h2><blockquote><p>这段代码的功能是将两个文件夹（pic和json）中不匹配的文件移动到一个叫“not_matched”的新文件夹中。 如果有对不上号的就移动到not_matched文件夹中</p><p>首先，它会遍历 pic 文件夹中的文件，如果文件名加上”.json”不在json文件夹中，它就会将这个文件加入到files_not_matched列表中。如果“not_matched”文件夹不存在，它会创建一个。然后，它会遍历files_not_matched列表，将其中的文件从pic文件夹中移动到“not_matched”文件夹中。</p><p>接下来，它会遍历json文件夹中的文件，如果文件名加上”.jpg”不在pic文件夹中，它就会将这个文件加入到files_not_matched列表中。最后，它会遍历files_not_matched列表，将其中的文件从json文件夹中移动到“not_matched”文件夹中。</p><p>最后，它会打印出移动的文件数量和所有不匹配的文件的文件名。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, shutil</span><br><span class="line"></span><br><span class="line">pic_path = <span class="string">&quot;pic/&quot;</span></span><br><span class="line">json_path = <span class="string">&quot;json/&quot;</span></span><br><span class="line"></span><br><span class="line">pic_files = &#123;&#125;</span><br><span class="line">json_files = &#123;&#125;</span><br><span class="line"></span><br><span class="line">pic_list = os.listdir(pic_path)</span><br><span class="line">json_list = os.listdir(json_path)</span><br><span class="line"></span><br><span class="line">files_not_matched = []</span><br><span class="line"></span><br><span class="line">moved_file_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> pic_list:</span><br><span class="line"><span class="keyword">if</span> i.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>] + <span class="string">&quot;.json&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> json_list:</span><br><span class="line">files_not_matched.append(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;not_matched&quot;</span>):</span><br><span class="line">os.mkdir(<span class="string">&quot;not_matched&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> files_not_matched:</span><br><span class="line">shutil.move(os.path.join(pic_path, i),</span><br><span class="line">os.path.join(<span class="string">&quot;not_matched&quot;</span>, i))</span><br><span class="line">moved_file_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> files_not_matched:</span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;now moved file num:&quot;</span>, moved_file_num)</span><br><span class="line"></span><br><span class="line">files_not_matched = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> json_list:</span><br><span class="line"><span class="keyword">if</span> i.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>] + <span class="string">&quot;.jpg&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> pic_list:</span><br><span class="line">files_not_matched.append(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> files_not_matched:</span><br><span class="line">shutil.move(os.path.join(json_path, i),</span><br><span class="line">os.path.join(<span class="string">&quot;not_matched&quot;</span>, i))</span><br><span class="line">moved_file_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> files_not_matched:</span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;total moved file num:&quot;</span>, moved_file_num)</span><br></pre></td></tr></table></figure><h2 id="5-remove-unknown-label-pic"><a href="#5-remove-unknown-label-pic" class="headerlink" title="5.remove-unknown-label-pic"></a>5.remove-unknown-label-pic</h2><blockquote><p>首先定义了一下label，这些标签对应的是图像分割中要识别的一些标签</p><p>这是一个把包含不知道的标签的 JSON 文件移动到指定文件夹的代码。它的思路是先将所有的 JSON 文件读入，并遍历里面的标签，如果发现标签不在预设的标签列表里面，就记录这个文件的文件名。然后判断是否已经有一个 “unknown_label” 文件夹，如果没有就新建一个。最后把这些文件移动到 “unknown_label” 文件夹里。最后打印结果，告诉用户有多少文件包含不知道的标签，有多少文件已经移动到 “unknown_label” 文件夹。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">labels = [<span class="string">&#x27;nerve&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;fibrous annulus&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;nucleus pulposus&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;ligamentum flavum&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;extra-dural fat&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;muscle&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;lamina&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;tool1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;tool2&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;tool3&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;tool4&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;tool5&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;tool6&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;tool7&#x27;</span>]</span><br><span class="line"></span><br><span class="line">json_path = <span class="string">&quot;json/&quot;</span></span><br><span class="line"></span><br><span class="line">json_list = os.listdir(json_path)</span><br><span class="line"></span><br><span class="line">json_content = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">file_with_unknown_label = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> json_list:</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(json_path, i), encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">json_content = json.load(f)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> json_content[<span class="string">&quot;shapes&quot;</span>]:</span><br><span class="line"><span class="keyword">if</span> j[<span class="string">&quot;label&quot;</span>] <span class="keyword">not</span> <span class="keyword">in</span> labels:</span><br><span class="line">file_with_unknown_label[i] = <span class="number">1</span> <span class="comment">#防止一个文件中有多个不认识的label</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;unknown_label&quot;</span>):</span><br><span class="line">os.mkdir(<span class="string">&quot;unknown_label&quot;</span>)</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> file_with_unknown_label:</span><br><span class="line">shutil.move(os.path.join(json_path, i),</span><br><span class="line">os.path.join(<span class="string">&quot;unknown_label&quot;</span>, i))</span><br><span class="line">count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; files have unknown label. &#123;&#125; files moved.&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line"><span class="built_in">len</span>(file_with_unknown_label),</span><br><span class="line">count)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="6-random-split-train-val-test"><a href="#6-random-split-train-val-test" class="headerlink" title="6.random-split-train-val-test"></a>6.random-split-train-val-test</h2><blockquote><p>这段代码是将 “json” 目录下的文件随机分成三个集合：训练集、验证集和测试集，其中，训练集占比 40%，验证集占比 20%，测试集占比 40%。把文件移动到 “train”、”val” 和 “test” 目录下。最后打印出文件移动的总数，以及每个集合中文件的数量。</p><p>其实完全可以手工来完成，不过学长这么搞了就这样吧</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, shutil, random</span><br><span class="line"></span><br><span class="line">json_path = <span class="string">&quot;json/&quot;</span></span><br><span class="line"></span><br><span class="line">file_list = os.listdir(json_path)</span><br><span class="line"></span><br><span class="line">json_num = <span class="built_in">len</span>(file_list)</span><br><span class="line"></span><br><span class="line">split_map = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(json_num)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;train&quot;</span>):</span><br><span class="line">os.mkdir(<span class="string">&quot;train&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;val&quot;</span>):</span><br><span class="line">os.mkdir(<span class="string">&quot;val&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;test&quot;</span>):</span><br><span class="line">os.mkdir(<span class="string">&quot;test&quot;</span>)</span><br><span class="line"></span><br><span class="line">train_proportion = <span class="number">0.4</span></span><br><span class="line">val_proportion = <span class="number">0.2</span></span><br><span class="line">test_proportion = <span class="number">0.4</span></span><br><span class="line"></span><br><span class="line">train_num = <span class="built_in">int</span>(json_num * train_proportion)</span><br><span class="line">test_num = <span class="built_in">int</span>(json_num * test_proportion)</span><br><span class="line">val_num = <span class="built_in">int</span>(json_num * val_proportion)</span><br><span class="line"></span><br><span class="line">train_path = <span class="string">&quot;train/&quot;</span></span><br><span class="line">val_path = <span class="string">&quot;val/&quot;</span></span><br><span class="line">test_path = <span class="string">&quot;test/&quot;</span></span><br><span class="line"></span><br><span class="line">NO_DATASET = <span class="number">0</span></span><br><span class="line">TRAIN_DATA = <span class="number">1</span></span><br><span class="line">VAL_DATA = <span class="number">2</span></span><br><span class="line">TEST_DATA = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">temp = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> temp &lt; train_num:</span><br><span class="line">randnum = random.randint(<span class="number">0</span>, json_num - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> split_map[randnum] == NO_DATASET:</span><br><span class="line">split_map[randnum] = TRAIN_DATA        <span class="comment">#means this file is regarded as train data</span></span><br><span class="line">temp += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">temp = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> temp &lt; val_num:</span><br><span class="line">randnum = random.randint(<span class="number">0</span>, json_num - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> split_map[randnum] == NO_DATASET:</span><br><span class="line">split_map[randnum] = VAL_DATA        <span class="comment">#means this file is regarded as train data</span></span><br><span class="line">temp += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">temp = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> temp &lt; test_num:</span><br><span class="line">randnum = random.randint(<span class="number">0</span>, json_num - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> split_map[randnum] == NO_DATASET:</span><br><span class="line">split_map[randnum] = TEST_DATA        <span class="comment">#means this file is regarded as train data</span></span><br><span class="line">temp += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(json_num):</span><br><span class="line"><span class="keyword">if</span> split_map[i] == TRAIN_DATA:</span><br><span class="line">shutil.move(os.path.join(json_path, file_list[i]),</span><br><span class="line">os.path.join(train_path, file_list[i]))</span><br><span class="line">count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> split_map[i] == VAL_DATA:</span><br><span class="line">shutil.move(os.path.join(json_path, file_list[i]),</span><br><span class="line">os.path.join(val_path, file_list[i]))</span><br><span class="line">count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> split_map[i] == TEST_DATA:</span><br><span class="line">shutil.move(os.path.join(json_path, file_list[i]),</span><br><span class="line">os.path.join(test_path, file_list[i]))</span><br><span class="line">count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;No dataset was assigned, json file&quot;</span>, count + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; files moved. \n&#123;&#125; train files.\n&#123;&#125; test files.\n&#123;&#125;val files.&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">count, train_num, test_num, val_num)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="extra-find-muscle"><a href="#extra-find-muscle" class="headerlink" title="extra-find_muscle"></a>extra-find_muscle</h2><blockquote><p>这段代码从文件夹 “train” 中读取所有文件，并使用 JSON 模块从每个文件中读取数据。对于每个文件，它会遍历 “shapes” 字典，如果 “label” 的值为 “tool6”，则将该文件名添加到 “with_muscle” 列表中。最后，它会输出 “with_muscle” 列表。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json, os</span><br><span class="line"></span><br><span class="line">json_path = <span class="string">&quot;train&quot;</span></span><br><span class="line"></span><br><span class="line">file_list = os.listdir(json_path)</span><br><span class="line"></span><br><span class="line">with_muscle = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> file_list:</span><br><span class="line">content = <span class="literal">None</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(json_path + <span class="string">&quot;/&quot;</span> + i, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">content = json.load(f)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> content[<span class="string">&quot;shapes&quot;</span>]:</span><br><span class="line"><span class="comment">#if j[&#x27;label&#x27;] == &#x27;muscle&#x27; or j[&#x27;label&#x27;] == &#x27;muscles&#x27;:</span></span><br><span class="line"><span class="keyword">if</span> j[<span class="string">&#x27;label&#x27;</span>] == <span class="string">&#x27;tool6&#x27;</span>:</span><br><span class="line"><span class="built_in">print</span>(j[<span class="string">&#x27;label&#x27;</span>])</span><br><span class="line">with_muscle.append(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(with_muscle)</span><br></pre></td></tr></table></figure><h2 id="labelme2coco-py-※★重点"><a href="#labelme2coco-py-※★重点" class="headerlink" title="labelme2coco.py    ※★重点"></a>labelme2coco.py    ※★重点</h2><blockquote><p>其实我解释的很潦草，因为我也不知道一些具体函数的实现</p><p>此脚本将 LabelMe 注释文件转换为 COCO 格式。 COCO 格式是一种流行的图像注释格式，用于计算机视觉任务，例如对象检测和分割。</p><p>该脚本首先使用 argparse 库解析命令行参数。 它以 LabelMe 注释文件的目录作为输入，并以 COCO 格式输出目录。 该脚本还需要一个带有类标签 (–labels) 的文本文件。</p><p>接下来，脚本创建 COCO 数据集的基本结构，并使用类标签填充类别字段。 该脚本将类名称映射到类 ID，其中 ID 从第一个类的 0 开始，每个后续类的 ID 增加 1。</p><p>该脚本然后处理输入目录中的每个 LabelMe 注释文件并将其转换为 COCO 格式。 每个 LabelMe 文件的图像数据在输出目录中保存为 JPEG 图像。 该脚本还在 COCO 数据集的注释字段中保存了每个图像的注释，包括边界框、分割和类 ID。 该脚本使用 imgviz 库保存图像数据，使用 uuid 库为每个注释生成唯一的 ID。</p><p>最后，脚本将整个 COCO 数据集保存在输出目录中的 JSON 文件中。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> os.path <span class="keyword">as</span> osp</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> imgviz <span class="comment"># pip3 install imgviz安装</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> labelme</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> pycocotools.mask</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please install pycocotools:\n\n    pip install pycocotools\n&quot;</span>)</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    parser = argparse.ArgumentParser(</span><br><span class="line">        formatter_class=argparse.ArgumentDefaultsHelpFormatter</span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--input_dir&quot;</span>, default=<span class="string">&#x27;data_annotated&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--output_dir&quot;</span>, default=<span class="string">&#x27;data_dataset_coco&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--labels&quot;</span>, default=<span class="string">&#x27;labels.txt&#x27;</span>)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&quot;--noviz&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;no visualization&quot;</span>, action=<span class="string">&quot;store_true&quot;</span></span><br><span class="line">    )</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> osp.exists(args.output_dir):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Output directory already exists:&quot;</span>, args.output_dir)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    os.makedirs(args.output_dir)</span><br><span class="line">    os.makedirs(osp.join(args.output_dir, <span class="string">&quot;JPEGImages&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> args.noviz:</span><br><span class="line">        os.makedirs(osp.join(args.output_dir, <span class="string">&quot;Visualization&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Creating dataset:&quot;</span>, args.output_dir)</span><br><span class="line"></span><br><span class="line">    now = datetime.datetime.now()</span><br><span class="line"></span><br><span class="line">    data = <span class="built_in">dict</span>(</span><br><span class="line">        info=<span class="built_in">dict</span>(</span><br><span class="line">            description=<span class="literal">None</span>,</span><br><span class="line">            url=<span class="literal">None</span>,</span><br><span class="line">            version=<span class="literal">None</span>,</span><br><span class="line">            year=now.year,</span><br><span class="line">            contributor=<span class="literal">None</span>,</span><br><span class="line">            date_created=now.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S.%f&quot;</span>),</span><br><span class="line">        ),</span><br><span class="line">        licenses=[<span class="built_in">dict</span>(url=<span class="literal">None</span>, <span class="built_in">id</span>=<span class="number">0</span>, name=<span class="literal">None</span>,)],</span><br><span class="line">        images=[</span><br><span class="line">            <span class="comment"># license, url, file_name, height, width, date_captured, id</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="built_in">type</span>=<span class="string">&quot;instances&quot;</span>,</span><br><span class="line">        annotations=[</span><br><span class="line">            <span class="comment"># segmentation, area, iscrowd, image_id, bbox, category_id, id</span></span><br><span class="line">        ],</span><br><span class="line">        categories=[</span><br><span class="line">            <span class="comment"># supercategory, id, name</span></span><br><span class="line">        ],</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    class_name_to_id = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i, line <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">open</span>(args.labels).readlines()):</span><br><span class="line">        class_id = i - <span class="number">1</span>  <span class="comment"># starts with -1</span></span><br><span class="line">        class_name = line.strip() <span class="comment">#除空格</span></span><br><span class="line">        <span class="keyword">if</span> class_id == -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">assert</span> class_name == <span class="string">&quot;__ignore__&quot;</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        class_name_to_id[class_name] = class_id</span><br><span class="line">        data[<span class="string">&quot;categories&quot;</span>].append(</span><br><span class="line">            <span class="built_in">dict</span>(supercategory=<span class="literal">None</span>, <span class="built_in">id</span>=class_id, name=class_name,)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    out_ann_file = osp.join(args.output_dir, <span class="string">&quot;annotations.json&quot;</span>)</span><br><span class="line">    label_files = glob.glob(osp.join(args.input_dir, <span class="string">&quot;*.json&quot;</span>))</span><br><span class="line">    <span class="keyword">for</span> image_id, filename <span class="keyword">in</span> <span class="built_in">enumerate</span>(label_files):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Generating dataset from:&quot;</span>, filename)</span><br><span class="line"></span><br><span class="line">        label_file = labelme.LabelFile(filename=filename)</span><br><span class="line"></span><br><span class="line">        base = osp.splitext(osp.basename(filename))[<span class="number">0</span>]</span><br><span class="line">        out_img_file = osp.join(args.output_dir, <span class="string">&quot;JPEGImages&quot;</span>, base + <span class="string">&quot;.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">        img = labelme.utils.img_data_to_arr(label_file.imageData)</span><br><span class="line">        imgviz.io.imsave(out_img_file, img)</span><br><span class="line">        data[<span class="string">&quot;images&quot;</span>].append(</span><br><span class="line">            <span class="built_in">dict</span>(</span><br><span class="line">                license=<span class="number">0</span>,</span><br><span class="line">                url=<span class="literal">None</span>,</span><br><span class="line">                file_name=osp.relpath(out_img_file, osp.dirname(out_ann_file)),</span><br><span class="line">                height=img.shape[<span class="number">0</span>],</span><br><span class="line">                width=img.shape[<span class="number">1</span>],</span><br><span class="line">                date_captured=<span class="literal">None</span>,</span><br><span class="line">                <span class="built_in">id</span>=image_id,</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        masks = &#123;&#125;  <span class="comment"># for area</span></span><br><span class="line">        segmentations = collections.defaultdict(<span class="built_in">list</span>)  <span class="comment"># for segmentation</span></span><br><span class="line">        <span class="keyword">for</span> shape <span class="keyword">in</span> label_file.shapes:</span><br><span class="line">            points = shape[<span class="string">&quot;points&quot;</span>]</span><br><span class="line">            label = shape[<span class="string">&quot;label&quot;</span>]</span><br><span class="line">            group_id = shape.get(<span class="string">&quot;group_id&quot;</span>)</span><br><span class="line">            shape_type = shape.get(<span class="string">&quot;shape_type&quot;</span>, <span class="string">&quot;polygon&quot;</span>)</span><br><span class="line">            mask = labelme.utils.shape_to_mask(</span><br><span class="line">                img.shape[:<span class="number">2</span>], points, shape_type</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> group_id <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                group_id = uuid.uuid1()</span><br><span class="line"></span><br><span class="line">            instance = (label, group_id)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> instance <span class="keyword">in</span> masks:</span><br><span class="line">                masks[instance] = masks[instance] | mask</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                masks[instance] = mask</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> shape_type == <span class="string">&quot;rectangle&quot;</span>:</span><br><span class="line">                (x1, y1), (x2, y2) = points</span><br><span class="line">                x1, x2 = <span class="built_in">sorted</span>([x1, x2])</span><br><span class="line">                y1, y2 = <span class="built_in">sorted</span>([y1, y2])</span><br><span class="line">                points = [x1, y1, x2, y1, x2, y2, x1, y2]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                points = np.asarray(points).flatten().tolist()</span><br><span class="line"></span><br><span class="line">            segmentations[instance].append(points)</span><br><span class="line">        segmentations = <span class="built_in">dict</span>(segmentations)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> instance, mask <span class="keyword">in</span> masks.items():</span><br><span class="line">            cls_name, group_id = instance</span><br><span class="line">            <span class="keyword">if</span> cls_name <span class="keyword">not</span> <span class="keyword">in</span> class_name_to_id:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            cls_id = class_name_to_id[cls_name]</span><br><span class="line"></span><br><span class="line">            mask = np.asfortranarray(mask.astype(np.uint8))</span><br><span class="line">            mask = pycocotools.mask.encode(mask)</span><br><span class="line">            area = <span class="built_in">float</span>(pycocotools.mask.area(mask))</span><br><span class="line">            bbox = pycocotools.mask.toBbox(mask).flatten().tolist()</span><br><span class="line"></span><br><span class="line">            data[<span class="string">&quot;annotations&quot;</span>].append(</span><br><span class="line">                <span class="built_in">dict</span>(</span><br><span class="line">                    <span class="built_in">id</span>=<span class="built_in">len</span>(data[<span class="string">&quot;annotations&quot;</span>]),</span><br><span class="line">                    image_id=image_id,</span><br><span class="line">                    category_id=cls_id,</span><br><span class="line">                    segmentation=segmentations[instance],</span><br><span class="line">                    area=area,</span><br><span class="line">                    bbox=bbox,</span><br><span class="line">                    iscrowd=<span class="number">0</span>,</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> args.noviz:</span><br><span class="line">            <span class="comment"># print(&#x27;mask:&#123;&#125;&#x27;.format(masks))</span></span><br><span class="line">            labels, captions, masks = <span class="built_in">zip</span>(</span><br><span class="line">                *[</span><br><span class="line">                    (class_name_to_id[cnm], cnm, msk)</span><br><span class="line">                    <span class="keyword">for</span> (cnm, gid), msk <span class="keyword">in</span> masks.items()</span><br><span class="line">                    <span class="keyword">if</span> cnm <span class="keyword">in</span> class_name_to_id</span><br><span class="line">                ]</span><br><span class="line">            )</span><br><span class="line">            viz = imgviz.instances2rgb(</span><br><span class="line">                image=img,</span><br><span class="line">                labels=labels,</span><br><span class="line">                masks=masks,</span><br><span class="line">                captions=captions,</span><br><span class="line">                font_size=<span class="number">15</span>,</span><br><span class="line">                line_width=<span class="number">2</span>,</span><br><span class="line">            )</span><br><span class="line">            out_viz_file = osp.join(</span><br><span class="line">                args.output_dir, <span class="string">&quot;Visualization&quot;</span>, base + <span class="string">&quot;.jpg&quot;</span></span><br><span class="line">            )</span><br><span class="line">            imgviz.io.imsave(out_viz_file, viz)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(out_ann_file, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(data, f, indent=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="old-6-split-train-val-test-py"><a href="#old-6-split-train-val-test-py" class="headerlink" title="old-6-split-train-val-test.py"></a>old-6-split-train-val-test.py</h2><blockquote><p>以上代码为一个python程序，用于将一个文件夹中的文件分配到三个不同的文件夹中，分别为”train”，”test”和”val”。</p><p>首先，它导入了两个库：os和shutil。os库是操作系统相关的库，可以完成许多操作系统的任务；shutil库是文件处理的库，可以完成文件的复制、移动、删除等操作。</p><p>接着，它创建了一个名为”json_path”的变量，并将其初始化为文件夹的路径”json &#x2F;“。然后，使用os.listdir（）函数读取该文件夹中的所有文件的名称，并存储在”file_list”变量中。</p><p>接下来，它使用os.path.exists（）函数检查是否存在”train”、”test”和”val”文件夹，如果不存在，则使用os.mkdir（）函数创建该文件夹。</p><p>接着，它定义了四个变量：”count”，”train_num”，”test_num”和”val_num”。这些变量用于计数文件的数量以及文件分配到哪个文件夹中。</p><p>然后，它定义了三个变量：”train_path”，”val_path”和”test_path”，分别代表”train”、”test”和”val”文件夹的路径。</p><p>最后，它使用for循环读取文件列表中的每个文件。对于每个文件，如果它的编号是5的倍数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, shutil</span><br><span class="line"></span><br><span class="line">json_path = <span class="string">&quot;json/&quot;</span></span><br><span class="line"></span><br><span class="line">file_list = os.listdir(json_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;train&quot;</span>):</span><br><span class="line">os.mkdir(<span class="string">&quot;train&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;val&quot;</span>):</span><br><span class="line">os.mkdir(<span class="string">&quot;val&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;test&quot;</span>):</span><br><span class="line">os.mkdir(<span class="string">&quot;test&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#rate: 2trian: 1val: 2test</span></span><br><span class="line"><span class="comment">#sample method: for each 5 files: train, test, val train, test</span></span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">train_num = <span class="number">0</span></span><br><span class="line">test_num = <span class="number">0</span></span><br><span class="line">val_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">train_path = <span class="string">&quot;train/&quot;</span></span><br><span class="line">val_path = <span class="string">&quot;val/&quot;</span></span><br><span class="line">test_path = <span class="string">&quot;test/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> file_list:</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> count % <span class="number">5</span> == <span class="number">0</span> <span class="keyword">or</span> count % <span class="number">5</span> == <span class="number">3</span>:</span><br><span class="line">shutil.move(os.path.join(json_path, i),</span><br><span class="line">os.path.join(train_path, i))</span><br><span class="line">train_num += <span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> count % <span class="number">5</span> == <span class="number">1</span> <span class="keyword">or</span> count % <span class="number">5</span> == <span class="number">4</span>:</span><br><span class="line">shutil.move(os.path.join(json_path, i),</span><br><span class="line">os.path.join(test_path, i))</span><br><span class="line">test_num += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">shutil.move(os.path.join(json_path, i),</span><br><span class="line">os.path.join(val_path, i))</span><br><span class="line">val_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; files moved. \n&#123;&#125; train files.\n&#123;&#125; test files.\n&#123;&#125;val files.&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">count, train_num, test_num, val_num)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>“json” 库是 Python 中的一个模块，它提供了一种编码和解码 JSON 数据的简单方法。JSON（JavaScript Object Notation）是一种轻量级的数据交换格式，广泛用于客户端和服务器之间或系统之间的数据交换。JSON 数据表示为键值对的集合，类似于 Python 中的字典，可以很容易地转换为和其他数据格式，包括 Python 字典。</p><p>Python 中的 “json” 库提供了两个主要函数：”json.dump()” 和 “json.load()”。”json.dump()” 函数用于将 JSON 数据写入文件，”json.load()” 函数用于从文件读取 JSON 数据。</p><p>在您提供的代码中，使用 “json.load()” 函数读取 JSON 文件的内容，并将其存储在 Python 对象中，然后可以对其进行操作。使用 “json.dump()” 函数将更新后的 Python 对象的内容写回 JSON 文件。</p><p>总之，Python 中的 “json” 库提供了一种方便的方法来处理 JSON 数据，可以在 Python 程序</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程复习-cumt</title>
      <link href="/2023/02/19/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0-cumt/"/>
      <url>/2023/02/19/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0-cumt/</url>
      
        <content type="html"><![CDATA[<p>#软工复习</p><blockquote><p>1、基于给定的需求绘制DFD图 25分。<br>掌握结构化分析的方法，按照数据流图的一般步骤基于给定的需求绘制DFD图，绘制DFD图要遵循DFD的守恒、封闭和父子平衡的原则。</p><p>2、用判定表描述加工逻辑，10分。<br>基于给定的需求利用判定表描述加工逻辑，要掌握判定表的一般表现形式。<br>3、过程模型应用，10分<br>基于给定的系统开发需求选择合适的模型进行系统开发，要掌握常用的过程模型，例如瀑布模型、原型法、增量模型、螺旋模型等。在回答问题是重点阐述模型的特点，然后针对待开发系统的需求详细阐述选择模型的理由。<br>4、测试用例设计，15分<br>掌握逻辑结构覆盖法与等价类划分法设计测试用例。逻辑覆盖法设计测试用例时需要给出每种覆盖粒度对应的测试用例，以及该用例对应的执行路径。等价类划分设计测试用例时，需要按照等价类划分的步骤：（1）划分有效及无效等价类；（2）基于给定的有效和无效等价类分别设计测试用例及预期输出。<br>5、面向对象综合应用题，40分<br>基于给定的需求说明给出USE CASE图、类图及时序图，以及开发该系统时选择何种语言及开发工具进行开发，并阐述选择语言的理由。</p><p>注：本文档只复习了这五种题型，资源取自以往和现在老师 ppt，只是一个小小的汇总帮助查看。</p></blockquote><h2 id="数据流图"><a href="#数据流图" class="headerlink" title="数据流图"></a>数据流图</h2><p>描述软件系统逻辑模型的技术，其本身属于需求分析的内容。</p><h3 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h3><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230219195010352.png" alt="image-20230219195010352"></p><p>此外，数据流图还有一些扩展符号。</p><p>*（星号）表示数据流之间是“与”关系</p><p>+（加号）表示“或”关系</p><p>“异或”表示只能从中选一个（互斥的关系）</p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230219195251018.png" alt="image-20230219195251018"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230219195403944.png" alt="image-20230219195403944"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230219195416479.png" alt="image-20230219195416479"></p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><h4 id="画流程图的步骤"><a href="#画流程图的步骤" class="headerlink" title="画流程图的步骤"></a>画流程图的步骤</h4><h5 id="1-从系统流程图出发，明确系统范围和流程"><a href="#1-从系统流程图出发，明确系统范围和流程" class="headerlink" title="1.从系统流程图出发，明确系统范围和流程"></a>1.从系统流程图出发，明确系统范围和流程</h5><p>（1）系统处理的范围 （2）信息处理流程</p><h5 id="2-识别并提取问题中数据流图中的元素"><a href="#2-识别并提取问题中数据流图中的元素" class="headerlink" title="2.识别并提取问题中数据流图中的元素"></a>2.识别并提取问题中数据流图中的元素</h5><p>（1）源与目的 （2）数据流 （3）加工处理 （4）数据存储</p><h5 id="3-根据信息处理流程，依次连接各个图上的元素"><a href="#3-根据信息处理流程，依次连接各个图上的元素" class="headerlink" title="3.根据信息处理流程，依次连接各个图上的元素"></a>3.根据信息处理流程，依次连接各个图上的元素</h5><p>（1）外部实体，加工、数据存储之间的数据流 （2）调整布局</p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230219201632664.png" alt="image-20230219201632664"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230219202327865.png" alt="image-20230219202327865"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230219202657765.png" alt="image-20230219202657765"></p><h4 id="数据元素"><a href="#数据元素" class="headerlink" title="数据元素"></a>数据元素</h4><p>不可再分的数据，如：学号、姓名、课程名称</p><h4 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h4><p>数据在系统中流动的方向</p><blockquote><p><strong>⑴名称、描述</strong></p><p><strong>⑵来源</strong></p><p><strong>数据源、加工处理、数据存储、外部项</strong></p><p><strong>⑶去处</strong></p><p><strong>数据终点、加工处理、数据存储、外部项</strong></p><p><strong>可能不唯一</strong></p><p><strong>⑷组成</strong></p><p><strong>按一定方式连接起若干数据元素</strong></p><p><strong>⑸流通量</strong></p><p><strong>单位时间内的传输次数</strong></p></blockquote><h4 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h4><blockquote><p><strong>组成：</strong></p><p><strong>⑴名称</strong></p><p><strong>⑵输入数据流</strong></p><p><strong>⑶输出数据流</strong></p><p><strong>⑷组成</strong></p><p><strong>按一定方式连接起若干数据元素</strong></p><p><strong>⑸描述</strong></p><p><strong>⑹组织方式</strong></p><p><strong>顺序、随机、其他排序方式</strong></p></blockquote><h4 id="加工逻辑"><a href="#加工逻辑" class="headerlink" title="加工逻辑"></a>加工逻辑</h4><p>描述DFD中每个逻辑功能“做什么”</p><blockquote><p><strong>⑴名称 ⑵编号</strong></p><p><strong>⑶输入 ⑷输出</strong></p><p><strong>⑸功能描述 ⑹加工处理</strong></p></blockquote><h3 id="分层细化数据流图"><a href="#分层细化数据流图" class="headerlink" title="分层细化数据流图"></a>分层细化数据流图</h3><p>自顶向下对系统功能进行分解</p><h4 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h4><p>1.父&#x2F;子图平衡（I&#x2F;O）</p><p>如果一张数据流图的某个加工分解成另一张数据流图时，则上层为父图，直接下层为子图。把一个处理分解为一系列处理时，分解前和分解后的输入&#x2F;输出数据流必须相同</p><p>2.掌握分解速度</p><p>一般一次引入2-7个加工处理</p><p>3.加工框编号</p><p>子图及其所有加工都应编号 便于引用追踪</p><p>4.区分全局文件和外部项</p><p>5.画数据流而不是控制流 </p><p>数据流反映系统“做什么”，不反映”如何做“，因此箭头上的数据流明恒只能是名词或者名词短语</p><p>6.一般不画物质流</p><p>数据流反映能用计算机处理的数据，而不是实物</p><p>7.每个加工至少有一个输入数据流和一个输出数据流，反映出此加工数据的来源和加工的结果</p><h4 id="（1）识别并从问题中提取数据流图中的元素"><a href="#（1）识别并从问题中提取数据流图中的元素" class="headerlink" title="（1）识别并从问题中提取数据流图中的元素"></a>（1）识别并从问题中提取数据流图中的元素</h4><p>1.源与目的</p><p>2.数据流</p><p>3.加工处理</p><p>4.数据存储</p><h4 id="（2）画顶层DFD"><a href="#（2）画顶层DFD" class="headerlink" title="（2）画顶层DFD"></a>（2）画顶层DFD</h4><p>顶层：一个加工处理和若干个输入输出流组成</p><h4 id="（3）分层细化DFD"><a href="#（3）分层细化DFD" class="headerlink" title="（3）分层细化DFD"></a>（3）分层细化DFD</h4><p>中间层：上层分解中的中间结果，还可以进一步分解</p><p>底层：由不可再分割的加工框组成</p><h4 id="（4）完善补充"><a href="#（4）完善补充" class="headerlink" title="（4）完善补充"></a>（4）完善补充</h4><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230219204324504.png" alt="image-20230219204324504"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230219204344852.png" alt="image-20230219204344852"></p><h3 id="例教材采购销售案例"><a href="#例教材采购销售案例" class="headerlink" title="例教材采购销售案例"></a>例教材采购销售案例</h3><p>下面，通过教材购销系统画出分层的数据流图。</p><p>教材购销系统的顶层数据流图表明，系统从学生处接受购书单，经处理后把领书单返回给学生，使学生可以凭领书单到书库领书。</p><p>对于脱销的教材，系统用缺书单的形式通知采购员。</p><p>新书进库后，也由采购员将进书通知返回给系统。</p><p>教材购销系统主要包含两个功能：教材销售、教材采购</p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230219205129831.png" alt="image-20230219205129831"></p><p>因此，接下来细化顶层数据流图，把系统分解为销售和采购两个加工。从而得到第一层数据流图。</p><p>这里，外部项“学生”与销售子系统联系，“采购员”与采购子系统联系</p><p>两个自系统也存在数据联系：</p><p>1、销售子系统通过“缺书登记表”把脱销的教材传送给“采购子系统”</p><p>2、采购子系统通过“进书通知”将教材入库信息通知销售子系统。</p><p>销售子系统的功能又可以细分为：</p><p>审查有效性</p><p>开发票</p><p>登记缺书</p><p>开领书单</p><p>补售教材</p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230219205146110.png" alt="image-20230219205146110"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230219205215962.png" alt="image-20230219205215962"></p><p>销售子系统被分解为5个子加工，编号从1.1到1.5。</p><p>审查有效性时：首先校对购书单的内容是否与学生用书表F3相符</p><p>还要通过售书登记表F4检查学生是否买过这些教材。</p><p>若发现购书单中有学生不用或买重了的教材，便发出无效书单。只有通过了审查的教材保留在有效购书单。</p><p>“开发票”加工框按有效购书单的内容检查“教材存量表”，</p><p>把可供应的教材写入“发票”</p><p>把数量不足或全缺的教材写入暂缺书单。</p><p>“登记并开领书单”加工框按发票内容开出“领书单”发给学生，并在“售书登记表”中作记录</p><p>“登记缺书”加工框将将“暂缺书单”登记到“缺书登记表”</p><p>“补售教材”加工框接受来自“采购子系统”的进书通知，并开出“补售书单”，修改“缺书登记表”</p><p>在第一层数据流图中，采购是系统内的一个加工框，但在本图中，“采购”却是处于销售之外的一个外部项。</p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230219205256325.png" alt="image-20230219205256325"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230219205322755.png" alt="image-20230219205322755"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230219205342176.png" alt="image-20230219205342176"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230219205408369.png" alt="image-20230219205408369"></p><h3 id="例银行储蓄系统数据流图"><a href="#例银行储蓄系统数据流图" class="headerlink" title="例银行储蓄系统数据流图"></a><strong>例银行储蓄系统数据流图</strong></h3><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230219210237486.png" alt="image-20230219210237486"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230219210250177.png" alt="image-20230219210250177"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230219210304867.png" alt="image-20230219210304867"></p><h2 id="判定表"><a href="#判定表" class="headerlink" title="判定表"></a>判定表</h2><p>懒得过多解释，直接ppt</p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230219210529153.png" alt="image-20230219210529153"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230219210552300.png" alt="image-20230219210552300"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230219210604283.png" alt="image-20230219210604283"></p><p>判定树是可以通过判定表转化过来的</p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230219210726795.png" alt="image-20230219210726795"></p><h2 id="过程模型应用"><a href="#过程模型应用" class="headerlink" title="过程模型应用"></a>过程模型应用</h2><p>上ppt</p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230219213438982.png" alt="image-20230219213438982"></p><h4 id="边做边改模型"><a href="#边做边改模型" class="headerlink" title="边做边改模型"></a>边做边改模型</h4><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230219213457908.png" alt="image-20230219213457908"></p><h4 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h4><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221103709529.png" alt="image-20230221103709529"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221103734753.png" alt="image-20230221103734753"></p><p>瀑布模型特点：</p><p>阶段间具有顺序性和依赖性关系</p><p>l）顺序性的含义是必须待前一阶段的工作完成之后，才能进行下一阶段的工作。</p><p>II）依赖性的含义是前一阶段的输出就是后一阶段的输入，只有前一阶段的输出正确，后一阶段的工作才有可能获得正确的结果。</p><h4 id="快速原型开发"><a href="#快速原型开发" class="headerlink" title="快速原型开发"></a>快速原型开发</h4><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221103923995.png" alt="image-20230221103923995"></p><p>快速模型特点</p><p><strong>快速原型模型特点</strong></p><p>l）在需求定义之前，需要快速构建一个系统。</p><p>lI）根据构建系统的优缺点，用户给开发人员提出反馈意见。</p><p>lII）根据反馈意见修改软件需求规格，以便系统可以更正确地反映用户的需求。</p><p>IV）减少各种假设以及风险。</p><h4 id="增量模型"><a href="#增量模型" class="headerlink" title="增量模型"></a>增量模型</h4><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221104028995.png" alt="image-20230221104028995"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221104045946.png" alt="image-20230221104045946"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221104103415.png" alt="image-20230221104103415"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221104126119.png" alt="image-20230221104126119"></p><h4 id="螺旋模型"><a href="#螺旋模型" class="headerlink" title="螺旋模型"></a>螺旋模型</h4><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221104145191.png" alt="image-20230221104145191"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221104203140.png" alt="image-20230221104203140"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221104220541.png" alt="image-20230221104220541"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221104230557.png" alt="image-20230221104230557"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221104251728.png" alt="image-20230221104251728"></p><h2 id="测试用例设计"><a href="#测试用例设计" class="headerlink" title="测试用例设计"></a>测试用例设计</h2><blockquote><p>测试用例&#x3D;{输入数据+期望结果}</p><p>1.白盒测试用例设计</p><p>2.黑盒测试用例设计</p><p>3.实用测试用例设计</p></blockquote><h3 id="逻辑覆盖法"><a href="#逻辑覆盖法" class="headerlink" title="逻辑覆盖法"></a>逻辑覆盖法</h3><blockquote><p>使用流程图设计测试用例</p><p>1.语句覆盖</p><p>2.判定覆盖</p><p>3.条件覆盖</p><p>4.判定条件覆盖</p><p>5.条件组合覆盖</p></blockquote><h4 id="1-语句覆盖"><a href="#1-语句覆盖" class="headerlink" title="1.语句覆盖"></a>1.语句覆盖</h4><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221104951116.png" alt="image-20230221104951116"></p><h4 id="2-判定覆盖"><a href="#2-判定覆盖" class="headerlink" title="2.判定覆盖"></a>2.判定覆盖</h4><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221105017654.png" alt="image-20230221105017654"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221105103047.png" alt="image-20230221105103047"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221105115733.png" alt="image-20230221105115733"></p><h4 id="3-条件覆盖"><a href="#3-条件覆盖" class="headerlink" title="3.条件覆盖"></a>3.条件覆盖</h4><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221105140003.png" alt="image-20230221105140003"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221105155655.png" alt="image-20230221105155655"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221105210730.png" alt="image-20230221105210730"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221105237306.png" alt="image-20230221105237306"></p><p>说明：条件覆盖不一定符合判定覆盖</p><blockquote><p>判定覆盖只关心判定表达式的值(真&#x2F;假),而条件覆盖涉及到判定表达式的每个条件的值(真&#x2F;假)</p></blockquote><h4 id="4-判定-x2F-条件覆盖"><a href="#4-判定-x2F-条件覆盖" class="headerlink" title="4.判定&#x2F;条件覆盖"></a>4.判定&#x2F;条件覆盖</h4><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221105857779.png" alt="image-20230221105857779"></p><h4 id="5-条件组合覆盖"><a href="#5-条件组合覆盖" class="headerlink" title="5.条件组合覆盖"></a>5.条件组合覆盖</h4><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221105928673.png" alt="image-20230221105928673"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221110057200.png" alt="image-20230221110057200"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221110107127.png" alt="image-20230221110107127"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221110120765.png" alt="image-20230221110120765"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221110134243.png" alt="image-20230221110134243"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221110148596.png" alt="image-20230221110148596"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221110205207.png" alt="image-20230221110205207"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221110222081.png" alt="image-20230221110222081"></p><h3 id="等价类划分设计测试用例"><a href="#等价类划分设计测试用例" class="headerlink" title="等价类划分设计测试用例"></a>等价类划分设计测试用例</h3><p>将所有可能的输入数据划分成若干个等价类，哭然后从每一类中选取少量有代表性的数据作为测试用例。</p><h4 id="等价类包括："><a href="#等价类包括：" class="headerlink" title="等价类包括："></a>等价类包括：</h4><h5 id="1-有效等价类"><a href="#1-有效等价类" class="headerlink" title="1.有效等价类"></a>1.有效等价类</h5><p>对于程序来说，是合理的，有效的输入数据构成的集合。</p><h5 id="2-无效等价类"><a href="#2-无效等价类" class="headerlink" title="2.无效等价类"></a>2.无效等价类</h5><p>对于程序来说，是不合理的、无效的输入数据构成的集合。</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221110634881.png" alt="image-20230221110634881"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221110647120.png" alt="image-20230221110647120"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221110656824.png" alt="image-20230221110656824"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221110713985.png" alt="image-20230221110713985"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221110725223.png" alt="image-20230221110725223"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221110735800.png" alt="image-20230221110735800"></p><h4 id="等价类划分的方法"><a href="#等价类划分的方法" class="headerlink" title="等价类划分的方法"></a>等价类划分的方法</h4><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221110744737.png" alt="image-20230221110744737"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221110819993.png" alt="image-20230221110819993"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221110830499.png" alt="image-20230221110830499"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221110839816.png" alt="image-20230221110839816"></p><h3 id="实用测试策略"><a href="#实用测试策略" class="headerlink" title="实用测试策略"></a>实用测试策略</h3><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221110952788.png" alt="image-20230221110952788"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221111002817.png" alt="image-20230221111002817"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221111013314.png" alt="image-20230221111013314"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221111023219.png" alt="image-20230221111023219"></p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230221111031813.png" alt="image-20230221111031813"></p><h3 id="面向对象综合应用题"><a href="#面向对象综合应用题" class="headerlink" title="面向对象综合应用题"></a>面向对象综合应用题</h3><p>基于给定的需求说明给出USE CASE图、类图及时序图，以及开发该系统时选择何种语言及开发工具进行开发，并阐述选择语言的理由。</p><blockquote><p>太多了，自己看ppt吧（偷懒）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> cumt review </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cumt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP and MySQL Web Development</title>
      <link href="/2023/01/23/PHP_AND_MYSQL_WEB_DEVELOPMENT/"/>
      <url>/2023/01/23/PHP_AND_MYSQL_WEB_DEVELOPMENT/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP-and-MySQL-Web-Development"><a href="#PHP-and-MySQL-Web-Development" class="headerlink" title="PHP and MySQL Web Development"></a>PHP and MySQL Web Development</h1><blockquote><p>All the information is based on the book PHP and MySQL Web Development(the 5th edition)  However, the author of this document has simplified the contents of the book and made a detailed design according to the principle of practicality first.</p></blockquote><blockquote><p>所有信息均基于《PHP和MySQL Web开发》（第5版）一书。然而，本文档的作者简化了本书的内容，并根据实用性优先的原则进行了详细设计。</p></blockquote><blockquote><p>阅读此文档前，您需具备HTML，CSS和JavaScript的基础知识</p></blockquote><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h4 id="1-web环境安装"><a href="#1-web环境安装" class="headerlink" title="1.web环境安装"></a>1.web环境安装</h4><blockquote><p>一般是三件套 ：web服务，php（本文作者应用的是phpv8.1.8），应用服务器（apache和nginx），MySQL管理系统</p></blockquote><h4 id="2-环境集成包"><a href="#2-环境集成包" class="headerlink" title="2.环境集成包"></a>2.环境集成包</h4><blockquote><p>有一些集成包比较方便 phpStudy，Xampp，宝塔面板，wdcp面板安装比较方便</p></blockquote><h2 id="使用php"><a href="#使用php" class="headerlink" title="使用php"></a>使用php</h2><h3 id="从创建老式表单开始"><a href="#从创建老式表单开始" class="headerlink" title="从创建老式表单开始"></a>从创建老式表单开始</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;processorder.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">&quot;border: 0px;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #cccccc;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;width: 150px; text-align: center;&quot;</span>&gt;</span>Item<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;width: 15px; text-align: center;&quot;</span>&gt;</span>Quantity<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>Tires<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tireqty&quot;</span> <span class="attr">size</span>=<span class="string">&quot;3&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>Oil<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tireqty&quot;</span> <span class="attr">size</span>=<span class="string">&quot;3&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>Spark Plugs<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tireqty&quot;</span> <span class="attr">size</span>=<span class="string">&quot;3&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit Oeder&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>form 表单属性解释</p><p>action属性是一个将会在用户点击Submit 按钮时加载的URL</p><p>用户输入在表单的数据将会通过http方法(这个方法规定在method属性中 ，有两种值 get(追加在URL的最后) 或者post（像单独分离的信息一样发送)）发送到这个URL</p></blockquote><h3 id="处理表单"><a href="#处理表单" class="headerlink" title="处理表单"></a>处理表单</h3><p>插入一行php代码，让其打印一段p标签</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;Order processed.&lt;/p&gt;&#x27;</span>;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="php-标签"><a href="#php-标签" class="headerlink" title="php 标签"></a>php 标签</h3><p>php标签 php标签总是以&lt;?php 开始 以 ?&gt;结束</p><p>这里有两种php标签的样式</p><h4 id="xml样式"><a href="#xml样式" class="headerlink" title="xml样式"></a>xml样式</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;Order processed.&lt;/p&gt;&#x27;</span>;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="短样式"><a href="#短样式" class="headerlink" title="短样式"></a>短样式</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span> <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;Order processed.&lt;/p&gt;&#x27;</span>;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>但是这种样式需要打开一些设置  例如config文件中的short_open_tags  </p><h3 id="php语句"><a href="#php语句" class="headerlink" title="php语句"></a>php语句</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt; Order processed.&lt;/p&gt;&#x27;</span>;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>echo 语句很容易理解，就是打印输出字符串让其出现在浏览器上，注意echo语句的最后有一个 分号，漏掉分号是一个比较哦啊常见的编译错误。</p><p>php 引擎自动略过多余的空格</p><h3 id="添加动态内容"><a href="#添加动态内容" class="headerlink" title="添加动态内容"></a>添加动态内容</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    echo &#x27;&lt;p&gt;Order processed at&#x27;;</span><br><span class="line">    echo date(&#x27;H:i,jS F Y&#x27;);</span><br><span class="line">    echo &quot;&lt;/p&gt;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>也可以将代码写在一行中，不同echo输出语句之间加(.)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Order processed at &quot;</span>.<span class="title function_ invoke__">date</span>(<span class="string">&#x27;H:i, jS F Y&#x27;</span>).<span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230117174629312.png" alt="image-20230117174629312"></p><h4 id="date-函数"><a href="#date-函数" class="headerlink" title="date()函数"></a>date()函数</h4><p>date（）函数期望你传递给他格式化的字符串，这些格式化的字符串代表着你想输出的风格。H是24小时格式的小时（hour），i是分钟。j是月份中的第几天，S（suffix）是表示序数的后缀（本文中是th）F是月份的全称（ full name of month）</p><blockquote><p>If date() gives you a warning about not having set the timezone, you should add the  date.timezone setting to your php.ini file. More information on this can be found in  the sample php.ini file in Appendix A（懒得翻译，自己看吧，一般也不会遇到这种情况）</p></blockquote><h3 id="访问表单变量"><a href="#访问表单变量" class="headerlink" title="访问表单变量"></a>访问表单变量</h3><h4 id="表单变量"><a href="#表单变量" class="headerlink" title="表单变量"></a>表单变量</h4><p>如果你想访问表单字段tireqty里的内容，可以通过以下这种方式</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_POST</span>[<span class="string">&#x27;tireqty&#x27;</span>]</span><br></pre></td></tr></table></figure><p>$_POST是一个可以保存经过HTTP POST请求提交的数据信息。</p><p>这里有三种方法可以存储表单的信息，$POST, $GET和 $REQUEST，GET 或 POST 提交的所有数据的组合也可以通过 $REQUEST 获得。</p><h4 id="访问并输出这些变量"><a href="#访问并输出这些变量" class="headerlink" title="访问并输出这些变量"></a>访问并输出这些变量</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="comment">//create short variable names</span></span><br><span class="line">   <span class="variable">$tireqty</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;tireqty&#x27;</span>];</span><br><span class="line">   <span class="variable">$oilqty</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;oilqty&#x27;</span>];</span><br><span class="line">   <span class="variable">$sparkqty</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;sparkqty&#x27;</span>];</span><br><span class="line"></span><br><span class="line">   <span class="comment">//有两种方式可以输出这些变量 一种是直接的输出</span></span><br><span class="line">   <span class="comment">//echo ￥tireqty .&#x27;tires&lt;br /&gt;&#x27;; </span></span><br><span class="line">   <span class="comment">//但是这种方式并不推荐，因为从安全性考虑 我们不推荐使用这种方式</span></span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt; Your order is as follows&lt;/p&gt;&#x27;</span>;</span><br><span class="line">   <span class="keyword">echo</span> <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$tireqty</span>) . <span class="string">&#x27; tires&lt;br /&gt;&#x27;</span>;</span><br><span class="line">   <span class="keyword">echo</span> <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$oilqty</span>) . <span class="string">&#x27; bottles of oil &lt;br /&gt;&#x27;</span>;</span><br><span class="line">   <span class="keyword">echo</span> <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$sparkqty</span>) . <span class="string">&#x27; spark plugs &lt;br /&gt;&#x27;</span>;</span><br><span class="line">   <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230117225403596.png" alt="image-20230117225403596"></p><h4 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//to print the string of variables + tires</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$tireqty</span>) . <span class="string">&#x27; tires&lt;br /&gt;&#x27;</span>;</span><br><span class="line">    <span class="comment">//or you can use 必须使用双引号 这个过程，用它的内容替换一个变量</span></span><br><span class="line"><span class="comment">//在字符串中，称为插值。</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;双引号变量插值&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$tireqty</span> tires&lt;br /&gt;&quot;</span>;</span><br><span class="line">    <span class="comment">//单引号将会直接输出单引号里面的内容</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;单引号直接输出&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;$tireqty tires&lt;br /&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>第三种指定打印字符串的方法是 heredoc语法 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&lt;&lt;&lt;theEnd</span></span><br><span class="line"><span class="string"> line 1</span></span><br><span class="line"><span class="string"> line 2</span></span><br><span class="line"><span class="string"> line 3</span></span><br><span class="line"><span class="string">theEnd</span></span><br></pre></td></tr></table></figure><h3 id="PHP数据类型"><a href="#PHP数据类型" class="headerlink" title="PHP数据类型"></a>PHP数据类型</h3><blockquote><p>Integer 整型</p><p>Float 浮点型</p><p>String 字符串</p><p>Boolen 布尔型</p><p>Array 数组类型</p><p>Object 对象</p><p>三种特殊类型是 NULL（空值）（未给定值、未设置或已给定特定值的变量值NULL的类型为NULL）</p><p>某些内置函数（如数据库函数）返回具有以下类型的变量资源它们表示外部资源（如数据库连接）。你几乎会当然不会直接操作资源变量，但它们通常由函数，并且必须作为参数传递给其他函数。</p><p>可调用函数本质上是传递给其他函数的函数</p></blockquote><h4 id="类型转化"><a href="#类型转化" class="headerlink" title="类型转化"></a>类型转化</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$totalqty</span> =<span class="number">0</span>;</span><br><span class="line"><span class="variable">$totalmount</span>=(<span class="keyword">float</span>)<span class="variable">$totalqty</span>;</span><br><span class="line"><span class="comment">//获取totalqty，，将其解释为浮点型，并将其存储在totalmount内</span></span><br></pre></td></tr></table></figure><h4 id="可变变量"><a href="#可变变量" class="headerlink" title="可变变量"></a>可变变量</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$varname</span> =<span class="string">&#x27;tireqty&#x27;</span>;</span><br><span class="line"><span class="comment">//你可以使用$$varname 代替$tireqty</span></span><br><span class="line"><span class="variable">$$varname</span>=<span class="number">5</span>;</span><br><span class="line"><span class="comment">//这个等同于</span></span><br><span class="line"><span class="variable">$tireqty</span>=<span class="number">5</span>;</span><br><span class="line"><span class="comment">//也就是说可变变量类似于是一个变量的别名</span></span><br></pre></td></tr></table></figure><h4 id="声明和使用常量"><a href="#声明和使用常量" class="headerlink" title="声明和使用常量"></a>声明和使用常量</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;TIREPRICE&#x27;</span>,<span class="number">100</span>);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;OILPRICE&#x27;</span>,<span class="number">10</span>);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;SPARKPRICE&#x27;</span>,<span class="number">4</span>);</span><br><span class="line"><span class="comment">//打印常量时不需要美元符号</span></span><br><span class="line"><span class="keyword">echo</span> TIREPRICE;</span><br><span class="line"><span class="comment">//除了自己定义的常量以外，php也提供了不少常量，这个可以通过phpinfo()去查看</span></span><br></pre></td></tr></table></figure><h3 id="使用运算符"><a href="#使用运算符" class="headerlink" title="使用运算符"></a>使用运算符</h3><h4 id="数学运算符"><a href="#数学运算符" class="headerlink" title="数学运算符"></a>数学运算符</h4><p>加减乘除取余，这都不用多解释了</p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230119075551545.png" alt="image-20230119075551545"></p><h4 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> =<span class="string">&quot;Bob&#x27;s&quot;</span>;</span><br><span class="line"><span class="variable">$B</span>=<span class="string">&quot;Auto Parts&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="variable">$a</span>.<span class="variable">$b</span>;</span><br></pre></td></tr></table></figure><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$totalqty</span>=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//这里的等于号就是赋值运算符 将变量totalqty赋值为0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="引用运算符"><a href="#引用运算符" class="headerlink" title="引用运算符"></a>引用运算符</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通常情况下将一个变量的值赋给另一个变量，一个变量的值修改并不会影响另一个变量</span></span><br><span class="line"><span class="variable">$a</span>=<span class="number">5</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$a</span>;</span><br><span class="line"><span class="comment">//当我们对a做出修改</span></span><br><span class="line"><span class="variable">$a</span>=<span class="number">7</span>;<span class="comment">//这个b将会仍然等于5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引用类似于一个别名，可以让两个变量名指向同一个内存，使得一个变量改变，另一个紧随其后也改变</span></span><br><span class="line"><span class="variable">$a</span>=<span class="number">5</span>;</span><br><span class="line"><span class="variable">$b</span>=&amp;<span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$a</span>=<span class="number">7</span>;<span class="comment">//$a and $b are now both 7</span></span><br><span class="line"><span class="comment">//如果你想解除这个引用，你可以对其中一个变量使用unset</span></span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><p>比较运算符会返回true或者false基于比较的结果。</p><h5 id="等于运算符"><a href="#等于运算符" class="headerlink" title="等于运算符"></a>等于运算符</h5><p>这个注意一下，等于运算符也属于比价运算符，当两边值相等时返回true，不相等是返回false</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>==<span class="variable">$b</span>;   </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230119081137796.png" alt="image-20230119081137796"></p><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>这个类似于c（或者c++)</p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230119081303099.png" alt="image-20230119081303099"></p><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><p>无非就是与或非 异或 左移 右移</p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230119081730203.png" alt="image-20230119081730203"></p><h4 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h4><h5 id="new-和-gt"><a href="#new-和-gt" class="headerlink" title="new 和 -&gt;"></a>new 和 -&gt;</h5><p>实例化一个类，访问类成员</p><h5 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h5><p>condition ？ if true : if false</p><h5 id="错误抑制运算符（The-Error-Suppression-Operator）"><a href="#错误抑制运算符（The-Error-Suppression-Operator）" class="headerlink" title="错误抑制运算符（The Error Suppression Operator）"></a>错误抑制运算符（The Error Suppression Operator）</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=@(<span class="number">87</span>/<span class="number">0</span>);</span><br><span class="line"><span class="comment">//如果没有这个@运算符，这一行将会产生除以零的警告，如果有这个运算符，这个问题就被抑制了</span></span><br><span class="line"><span class="comment">//如果你是用了这种方式，你需要修改在php.ini中的track_errors中的代码来实现错误处理，</span></span><br><span class="line"><span class="comment">//错误信息将会存储在全局变量$php_errormsg中</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="执行运算符"><a href="#执行运算符" class="headerlink" title="执行运算符"></a>执行运算符</h5><p>执行运算符是一对反引号&#96;&#96;，位于键盘左上角与~同键位</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$out</span>=`dir c:`;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span> .<span class="variable">$out</span> .<span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>表达式的结果是命令行输出的结果。</p><h5 id="数组运算符"><a href="#数组运算符" class="headerlink" title="数组运算符"></a>数组运算符</h5><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230119091305050.png" alt="image-20230119091305050"></p><h5 id="类型运算符-instanceof"><a href="#类型运算符-instanceof" class="headerlink" title="类型运算符 instanceof"></a>类型运算符 instanceof</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sampleClass</span></span>&#123;&#125;;</span><br><span class="line"><span class="variable">$myObject</span> = <span class="keyword">new</span> <span class="title function_ invoke__">sampleClass</span>();</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$myObject</span> <span class="keyword">instanceof</span> sampleClass)</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&quot;myObject is an instance of sampleClass&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="完成整个表单"><a href="#完成整个表单" class="headerlink" title="完成整个表单"></a>完成整个表单</h3><p>添加如下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$totalqty</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable">$totalqty</span> = <span class="variable">$tireqty</span> + <span class="variable">$oilqty</span> + <span class="variable">$sparkqty</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Items ordered: &quot;</span> . <span class="variable">$totalqty</span> . <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">    <span class="variable">$totalamount</span> = <span class="number">0.00</span>;</span><br><span class="line">    <span class="comment">//define the price</span></span><br><span class="line">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;TIREPRICE&#x27;</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;OILPRICE&#x27;</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;SPARKPRICE&#x27;</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="variable">$totalamount</span> = <span class="variable">$tireqty</span> * TIREPRICE</span><br><span class="line">        + <span class="variable">$oilqty</span> * OILPRICE</span><br><span class="line">        + <span class="variable">$sparkqty</span> * SPARKPRICE;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Subtotal: $&quot;</span> . <span class="title function_ invoke__">number_format</span>(<span class="variable">$totalamount</span>, <span class="number">2</span>) . <span class="string">&quot;&lt;br /&gt;&quot;</span>; <span class="comment">//数字样式保留两位小数</span></span><br><span class="line">    <span class="variable">$taxrate</span> = <span class="number">0.10</span>; <span class="comment">//the sales tax</span></span><br><span class="line">    <span class="variable">$totalamount</span> = <span class="variable">$totalamount</span> * (<span class="number">1</span> + <span class="variable">$taxrate</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Total including tax: $&quot;</span> . <span class="title function_ invoke__">number_format</span>(<span class="variable">$totalamount</span>, <span class="number">2</span>) . <span class="string">&quot;&lt;/p&gt;&quot;</span></span><br></pre></td></tr></table></figure><p>试着输入123</p><p><img src="https://raw.githubusercontent.com/lijianye521/images/master/image-20230123184017164.png" alt="image-20230123184017164"></p>]]></content>
      
      
      <categories>
          
          <category> PHP and Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/2023/01/15/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2023/01/15/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库MySQL从入门到如土"><a href="#数据库MySQL从入门到如土" class="headerlink" title="数据库MySQL从入门到如土"></a>数据库MySQL从入门到如土</h1><h2 id="数据库基本操作"><a href="#数据库基本操作" class="headerlink" title="数据库基本操作"></a>数据库基本操作</h2><h3 id="DDL数据库操作"><a href="#DDL数据库操作" class="headerlink" title="DDL数据库操作"></a>DDL数据库操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">show databases;//查询所有数据集</span><br><span class="line">select database();//查询当前数据库</span><br><span class="line">create database[if not exists数据库][default charset字符集][collate排序规则];//创建一个数据库</span><br><span class="line">drop database 数据库名[if exists];//删除数据库</span><br><span class="line">use 数据库名;// 使用该数据库</span><br></pre></td></tr></table></figure><h4 id="DDL-表操作-查询；"><a href="#DDL-表操作-查询；" class="headerlink" title="DDL-表操作-查询；"></a>DDL-表操作-查询；</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show tables;//查询当前数据库所有表</span><br><span class="line">desc 表名;//查询表结构</span><br><span class="line">show create table;//查询指定表的建表语句</span><br></pre></td></tr></table></figure><h4 id="DDL-表操作-创建"><a href="#DDL-表操作-创建" class="headerlink" title="DDL-表操作-创建"></a>DDL-表操作-创建</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">  字段1 字段1类型[comment 字段1注释]，</span><br><span class="line">  字段2 字段2类型[comment 字段2注释]，</span><br><span class="line">  字段3 字段3类型[comment 字段3注释]，</span><br><span class="line">  ......</span><br><span class="line">  字段n 字段n类型[comment 字段n注释]</span><br><span class="line">) [comment 表注释];</span><br><span class="line">//[...]为可选参数，最优一个字段后面没有逗号</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//创建表</span><br><span class="line"> create table tb_user(</span><br><span class="line">    -&gt; id int comment &#x27;编号&#x27;,</span><br><span class="line">    -&gt; name varchar(50) comment &#x27;姓名&#x27;,</span><br><span class="line">    -&gt; age int comment &#x27;年龄&#x27;,</span><br><span class="line">    -&gt; gender varchar(1) comment &#x27;性别&#x27;</span><br><span class="line">    -&gt; ) comment &#x27;用户表&#x27;;</span><br><span class="line">//查询表的数据类型所用的语句</span><br><span class="line">    mysql&gt; desc tb_user</span><br><span class="line">    -&gt; ;</span><br><span class="line">+--------+-------------+--</span><br><span class="line"></span><br><span class="line">----+-----+---------+-------+</span><br><span class="line">| Field  | Type        | Null | Key | Default | Extra |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| id     | int         | YES  |     | NULL    |       |</span><br><span class="line">| name   | varchar(50) | YES  |     | NULL    |       |</span><br><span class="line">| age    | int         | YES  |     | NULL    |       |</span><br><span class="line">| gender | varchar(1)  | YES  |     | NULL    |       |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">//查询指定表的建表语句</span><br><span class="line"></span><br><span class="line"> tb_user | CREATE TABLE `tb_user` (</span><br><span class="line">  `id` int DEFAULT NULL COMMENT &#x27;编号&#x27;,</span><br><span class="line">  `name` varchar(50) DEFAULT NULL COMMENT &#x27;姓名&#x27;,</span><br><span class="line">  `age` int DEFAULT NULL COMMENT &#x27;年龄&#x27;,</span><br><span class="line">  `gender` varchar(1) DEFAULT NULL COMMENT &#x27;性别&#x27;</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT=&#x27;用户表&#x27; |</span><br></pre></td></tr></table></figure><h3 id="数据类型解释"><a href="#数据类型解释" class="headerlink" title="数据类型解释"></a>数据类型解释</h3><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>CHARACTER(n)</td><td>字符&#x2F;字符串。固定长度 n。</td></tr><tr><td>VARCHAR(n) 或CHARACTER VARYING(n)</td><td>字符&#x2F;字符串。可变长度。最大长度 n。</td></tr><tr><td>BINARY(n)</td><td>二进制串。固定长度 n。</td></tr><tr><td>BOOLEAN</td><td>存储 TRUE 或 FALSE 值</td></tr><tr><td>VARBINARY(n) 或BINARY VARYING(n)</td><td>二进制串。可变长度。最大长度 n。</td></tr><tr><td>INTEGER(p)</td><td>整数值（没有小数点）。精度 p。</td></tr><tr><td>SMALLINT</td><td>整数值（没有小数点）。精度 5。</td></tr><tr><td>INTEGER</td><td>整数值（没有小数点）。精度 10。</td></tr><tr><td>BIGINT</td><td>整数值（没有小数点）。精度 19。</td></tr><tr><td>DECIMAL(p,s)</td><td>精确数值，精度 p，小数点后位数 s。例如：decimal(5,2) 是一个小数点前有 3 位数，小数点后有 2 位数的数字。</td></tr><tr><td>NUMERIC(p,s)</td><td>精确数值，精度 p，小数点后位数 s。（与 DECIMAL 相同）</td></tr><tr><td>FLOAT(p)</td><td>近似数值，尾数精度 p。一个采用以 10 为基数的指数计数法的浮点数。该类型的 size 参数由一个指定最小精度的单一数字组成。</td></tr><tr><td>REAL</td><td>近似数值，尾数精度 7。</td></tr><tr><td>FLOAT</td><td>近似数值，尾数精度 16。</td></tr><tr><td>DOUBLE PRECISION</td><td>近似数值，尾数精度 16。</td></tr><tr><td>DATE</td><td>存储年、月、日的值。</td></tr><tr><td>TIME</td><td>存储小时、分、秒的值。</td></tr><tr><td>TIMESTAMP</td><td>存储年、月、日、小时、分、秒的值。</td></tr><tr><td>INTERVAL</td><td>由一些整数字段组成，代表一段时间，取决于区间的类型。</td></tr><tr><td>ARRAY</td><td>元素的固定长度的有序集合</td></tr><tr><td>MULTISET</td><td>元素的可变长度的无序集合</td></tr><tr><td>XML</td><td>存储 XML 数据</td></tr></tbody></table><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><blockquote><p>设计一张员工信息表，需求如下</p><p>1.编号（纯数字）</p><p>2.员工工号（字符串类型，长度不超过10位）</p><p>3.员工姓名（字符串类型，长度不超过10位）</p><p>4.性别（男&#x2F;女， 存储一个汉字）</p><p>5.年龄（正常人年龄，不可存负数）</p><p>6.身份证号（二代身份证号均为18位，身份证号有带有x的字符）</p><p>7.入职时间（取值年月日即可）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">create table emp(</span><br><span class="line">  id int comment &#x27;编号&#x27;,</span><br><span class="line">  worknumber varchar(10) comment &#x27;员工工号&#x27;,</span><br><span class="line">  name varchar(10) comment &#x27;姓名&#x27;,</span><br><span class="line">  gender char(1) comment &#x27;性别&#x27;,</span><br><span class="line">  age tinyint unsigned comment &#x27;年龄&#x27;,</span><br><span class="line">  idcard char(18) comment &#x27;身份证号&#x27;,</span><br><span class="line">  entrydate date comment &#x27;入职时间&#x27;</span><br><span class="line">  )comment &#x27;员工表&#x27;;</span><br><span class="line">  </span><br><span class="line">  desc emp;</span><br><span class="line">  //结果</span><br><span class="line">  +------------+------------------+------+-----+---------+-------+</span><br><span class="line">| Field      | Type             | Null | Key | Default | Extra |</span><br><span class="line">+------------+------------------+------+-----+---------+-------+</span><br><span class="line">| id         | int              | YES  |     | NULL    |       |</span><br><span class="line">| worknumber | varchar(10)      | YES  |     | NULL    |       |</span><br><span class="line">| name       | varchar(10)      | YES  |     | NULL    |       |</span><br><span class="line">| gender     | char(1)          | YES  |     | NULL    |       |</span><br><span class="line">| age        | tinyint unsigned | YES  |     | NULL    |       |</span><br><span class="line">| idcard     | char(18)         | YES  |     | NULL    |       |</span><br><span class="line">| entrydate  | date             | YES  |     | NULL    |       |</span><br><span class="line">+------------+------------------+------+-----+---------+-------+</span><br><span class="line">7 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><h4 id="DDL-表操作-修改"><a href="#DDL-表操作-修改" class="headerlink" title="DDL-表操作-修改"></a>DDL-表操作-修改</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//添加字段</span><br><span class="line">alter table 表名 add 字段名 类型（长度）[comment 注释][约束];</span><br><span class="line">//修改数据类型</span><br><span class="line">alter table 表名 字段名 新数据类型（长度）;</span><br><span class="line">//修改字段名和字段类型</span><br><span class="line">alter 表名 change 旧字段名 新字段名 类型（长度） [comment 注释][约束]；</span><br><span class="line">//删除字段</span><br><span class="line">alter table 表名 drop 字段名;</span><br><span class="line">//修改表名</span><br><span class="line">alter table 表名 rename to 新表名;</span><br></pre></td></tr></table></figure><h4 id="DDL-表操作-删除"><a href="#DDL-表操作-删除" class="headerlink" title="DDL-表操作-删除"></a>DDL-表操作-删除</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//删除表</span><br><span class="line">drop table [if exists]表名;</span><br><span class="line">//删除指定表，并重新创建该表（数据没有了 只有空表）</span><br><span class="line">truncate table 表名；</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发日志</title>
      <link href="/2023/01/15/%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/"/>
      <url>/2023/01/15/%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<p>that is a log of this blog.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>作物杂交</title>
      <link href="/2023/01/15/%E4%BD%9C%E7%89%A9%E6%9D%82%E4%BA%A4/"/>
      <url>/2023/01/15/%E4%BD%9C%E7%89%A9%E6%9D%82%E4%BA%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="作物杂交（深度优先遍历）"><a href="#作物杂交（深度优先遍历）" class="headerlink" title="作物杂交（深度优先遍历）"></a>作物杂交（深度优先遍历）</h1><p>(91)</p><p>(7)</p><p><a class="link"   href="https://www.lanqiao.cn/questions/topics/28/" >**<i class="fas fa-external-link-alt"></i></a></p><p>**</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>作物杂交是作物栽培中重要的一步。已知有 NN 种作物 (编号 11 至 NN )，第 ii 种作物从播种到成熟的时间为 T_iTi。作物之间两两可以进行杂交，杂交时间取两种中时间较长的一方。如作物 A 种植时间为 5 天，作物 B 种植时间为 7 天，则 AB 杂交花费的时间为 7 天。作物杂交会产生固定的作物，新产生的作物仍然属于 NN 种作物中的一种。</p><p>初始时，拥有其中 MM 种作物的种子 (数量无限，可以支持多次杂交)。同时可以进行多个杂交过程。求问对于给定的目标种子，最少需要多少天能够得到。</p><p>如存在 4 种作物 ABCD，各自的成熟时间为 5 天、7 天、3 天、8 天。初始拥有 AB 两种作物的种子，目标种子为 D，已知杂交情况为 A × B → C，A × C → D。则最短的杂交过程为：</p><p>第 1 天到第 7 天 (作物 B 的时间)，A × B → C。</p><p>第 8 天到第 12 天 (作物 A 的时间)，A × C → D。</p><p>花费 12 天得到作物 D 的种子。</p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入的第 1 行包含 4 个整数 N, M, K, TN,M,K,T，NN 表示作物种类总数 (编号 11 至 NN)，MM 表示初始拥有的作物种子类型数量，KK 表示可以杂交的方案数，TT 表示目标种子的编号。</p><p>第 2 行包含 NN 个整数，其中第 ii 个整数表示第 ii 种作物的种植时间 T_i\ (1 \leq T_i \leq 100)Ti (1≤Ti≤100)。</p><p>第 3 行包含 MM 个整数，分别表示已拥有的种子类型 K_j\ (1 \leq K_j \leq M)Kj (1≤Kj≤M)，K_jKj 两两不同。</p><p>第 4 至 KK + 3 行，每行包含 3 个整数 A, B,CA,B,C，表示第 AA 类作物和第 BB 类作物杂交可以获得第 CC 类作物的种子。</p><p>其中，1 \leq N \leq 2000, 2 \leq M \leq N, 1 \leq K \leq 10^5, 1 \leq T \leq N1≤N≤2000,2≤M≤N,1≤K≤105,1≤T≤N, 保证目标种子一定可以通过杂交得到。</p><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一个整数，表示得到目标种子的最短杂交时间。</p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote><p>输入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">6 2 4 6</span><br><span class="line">5 3 4 6 4 9</span><br><span class="line">1 2</span><br><span class="line">1 2 3</span><br><span class="line">1 3 4</span><br><span class="line">2 3 5</span><br><span class="line">4 5 6</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">16</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>样例说明</p></blockquote><p>第 1 天至第 5 天，将编号 1 与编号 2 的作物杂交，得到编号 3 的作物种子。</p><p>第 6 天至第 10 天，将编号 1 与编号 3 的作物杂交，得到编号 4 的作物种子。</p><p>第 6 天至第 9 天，将编号 2 与编号 3 的作物杂交，得到编号 5 的作物种子。</p><p>第 11 天至第 16 天，将编号 4 与编号 5 的作物杂交，得到编号 6 的作物种子。</p><p>总共花费 16 天。</p><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><ul><li>最大运行时间：2s</li><li>最大运行内存: 256M</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n, m, k, goal;</span><br><span class="line"><span class="type">int</span> t[MAXN];</span><br><span class="line"><span class="type">bool</span> have_k[MAXN];</span><br><span class="line"><span class="type">int</span> zajiao[MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> limit_time;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">father</span> &#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">int</span> u[MAXN];</span><br><span class="line">    <span class="type">int</span> v[MAXN];</span><br><span class="line">    <span class="type">int</span> limtime;</span><br><span class="line">&#125;fa[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span>&amp; a, <span class="type">int</span>&amp; b)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> tep = a; a = b; b = tep;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//N,M,K,T，</span></span><br><span class="line">    <span class="comment">//N 表示作物种类总数 (编号 11 至 N)，</span></span><br><span class="line">    <span class="comment">//M 表示初始拥有的作物种子类型数量，</span></span><br><span class="line">    <span class="comment">//K 表示可以杂交的方案数，T 表示目标种子的编号。</span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k &gt;&gt; goal;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; t[i];<span class="comment">//输入各个种子的培养时间 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> z;</span><br><span class="line">        cin &gt;&gt; z;</span><br><span class="line">        have_k[z] = <span class="literal">true</span>;<span class="comment">//当前拥有的种子 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">        <span class="type">int</span> u, v, w;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        zajiao[u][v] = zajiao[v][u] = w;<span class="comment">//zajiao[x][y]=z  x是父亲 y是母亲 z是孩子 </span></span><br><span class="line">        <span class="type">int</span> tep = ++fa[w].num;</span><br><span class="line">        <span class="keyword">if</span> (t[u] &lt; t[v])<span class="built_in">swap</span>(u, v);</span><br><span class="line">        fa[w].u[tep] = u;</span><br><span class="line">        fa[w].v[tep] = v;<span class="comment">//保证u的位置的数据是最大的 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[x].num == <span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//判断是否为叶结点 已知种子 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= fa[x].num; i++) &#123;</span><br><span class="line">        <span class="type">int</span> v = fa[x].v[i];<span class="comment">//第i个父亲 </span></span><br><span class="line">        <span class="type">int</span> u = fa[x].u[i];<span class="comment">//第i个母亲 </span></span><br><span class="line">        <span class="keyword">if</span> (!have_k[u]) &#123;<span class="comment">//如果没有这个种子 </span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">dfs</span>(u))<span class="keyword">continue</span>;<span class="comment">//如果这个结点   这个循环会被跳出 </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!have_k[v]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">dfs</span>(v))<span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!fa[x].limtime)<span class="comment">//如果目前得到这个种子的时间为0的话 那么对得到它的时间进行更新 </span></span><br><span class="line">            fa[x].limtime = <span class="built_in">max</span>(fa[u].limtime, fa[v].limtime) + <span class="built_in">max</span>(t[u], t[v]);</span><br><span class="line">            <span class="comment">//时间等于他的两个父节点所需要的最大时间   再加上这两个父节点种子培育时间的最大值 </span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            fa[x].limtime = <span class="built_in">min</span>(fa[x].limtime, <span class="built_in">max</span>(fa[u].limtime, fa[v].limtime) + <span class="built_in">max</span>(t[u], t[v]));</span><br><span class="line">    &#125;    </span><br><span class="line">    have_k[x] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">input</span>();</span><br><span class="line">    <span class="built_in">dfs</span>(goal);</span><br><span class="line">    cout &lt;&lt; fa[goal].limtime;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">6 2 4 6</span></span><br><span class="line"><span class="comment">5 3 4 6 4 9</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">1 2 3</span></span><br><span class="line"><span class="comment">1 3 4</span></span><br><span class="line"><span class="comment">2 3 5</span></span><br><span class="line"><span class="comment">4 5 6</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">seed</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;<span class="comment">//表示培育出该种子的方案数</span></span><br><span class="line"><span class="type">int</span> father[<span class="number">10000</span>]=&#123;<span class="number">0</span>&#125;; </span><br><span class="line"><span class="type">int</span> mather[<span class="number">10000</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> consume=<span class="number">0</span>;<span class="comment">//需要花费的时间 </span></span><br><span class="line">&#125;;seed shuzu[<span class="number">1000</span>]; </span><br><span class="line"><span class="type">int</span> total_seed,current_seed,plan,target;<span class="comment">//种子总数  现有种子数，方案数 目标种子 </span></span><br><span class="line"><span class="type">int</span> time2[<span class="number">10001</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">bool</span> have_seed[<span class="number">10001</span>]=&#123;<span class="number">0</span>&#125;;<span class="comment">//0表示有种子 1表示没有种子 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">input</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;total_seed&gt;&gt;current_seed&gt;&gt;plan&gt;&gt;target;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=total_seed;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;time2[i];&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=current_seed;i++)</span><br><span class="line">&#123;<span class="type">int</span> j;</span><br><span class="line">cin&gt;&gt;j;</span><br><span class="line">have_seed[j]=<span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=plan;i++)<span class="comment">//将方案装进数组 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> father,mather,children;</span><br><span class="line">cin&gt;&gt;father&gt;&gt;mather&gt;&gt;children;</span><br><span class="line"><span class="type">int</span> temp=++shuzu[children].sum;</span><br><span class="line">shuzu[children].father[temp]=father;</span><br><span class="line">shuzu[children].mather[temp]=mather;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout&lt;&lt;&quot;输入成功&quot;;</span></span><br><span class="line"> </span><br><span class="line">&#125; ; </span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> mubiao)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(shuzu[mubiao].sum==<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//如果这个结点已经有了就结束 并且返回false</span></span><br><span class="line"><span class="type">int</span> father,mather;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=shuzu[mubiao].sum;j++)</span><br><span class="line">&#123; father=shuzu[mubiao].father[j];</span><br><span class="line"> mather=shuzu[mubiao].mather[j];</span><br><span class="line">  <span class="keyword">if</span> (!have_seed[father]) &#123;<span class="comment">//如果没有这个种子 </span></span><br><span class="line">            <span class="built_in">dfs</span>(father);<span class="comment">//如果这个结点  </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!have_seed[mather]) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(mather);<span class="comment">//去找到母亲 </span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(shuzu[mubiao].consume==<span class="number">0</span>)<span class="comment">//培育出来父母所需要的最大值以及培育出来这个孩子需要的最大值 </span></span><br><span class="line">shuzu[mubiao].consume=<span class="built_in">max</span>(shuzu[father].consume,shuzu[mather].consume)+<span class="built_in">max</span>(time2[father],time2[mather]); </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">shuzu[mubiao].consume=<span class="built_in">min</span>(<span class="built_in">max</span>(shuzu[father].consume,shuzu[mather].consume)+<span class="built_in">max</span>(time2[father],time2[mather]),shuzu[mubiao].consume);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">have_seed[mubiao]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span>();</span><br><span class="line"><span class="built_in">dfs</span>(target);</span><br><span class="line"> cout&lt;&lt;shuzu[target].consume;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度优先遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最短路</title>
      <link href="/2023/01/15/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
      <url>/2023/01/15/%E6%9C%80%E7%9F%AD%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><strong>本题为填空题，只需要算出结果后，在代码中使用输出语句将所填结果输出即可。</strong></p><p>如下图所示，GG 是一个无向图，其中蓝色边的长度是 11、橘色边的长度是 22、绿色边的长度是 33。</p><p><img src="https://doc.shiyanlou.com/courses/uid1580206-20210312-1615537376560" alt="图片描述"></p><p>则从 AA 到 SS 的最短距离是多少？</p><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><ul><li>最大运行时间：1s</li><li>最大运行内存: 128M</li></ul><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><p>用最简单的dfs遍历方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> G[<span class="number">27</span>][<span class="number">27</span>];</span><br><span class="line"><span class="type">int</span> book[<span class="number">27</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> dis=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> MIN=<span class="number">9999999</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">char</span> s1,<span class="type">char</span> s2,<span class="type">int</span> s3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> i=s1-<span class="string">&#x27;A&#x27;</span>+<span class="number">1</span>;</span><br><span class="line">  <span class="type">int</span> j=s2-<span class="string">&#x27;A&#x27;</span>+<span class="number">1</span>;</span><br><span class="line">  G[i][j]=s3;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="built_in">add</span>(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;K&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;N&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;N&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这个深度优先遍历只能从A   开始   1  到 S结束 19</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> dis)</span><span class="comment">//深度优先遍历  递归就行 </span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">if</span>(dis&gt;MIN) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">19</span>)<span class="comment">//临界条件 是否到达 S </span></span><br><span class="line">&#123;<span class="keyword">if</span>(dis&lt;MIN)<span class="comment">//到达并且所用的路径小于这个min值 </span></span><br><span class="line">&#123;</span><br><span class="line">MIN=dis;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span>  j=<span class="number">1</span>;j&lt;<span class="number">26</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//判断两个结点之间是否有回路</span></span><br><span class="line"><span class="keyword">if</span>(G[a][j]!=<span class="number">999</span>&amp;&amp;book[j]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">book[j]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(j,dis+G[a][j]);</span><br><span class="line">book[j]=<span class="number">0</span>;<span class="comment">//之前的探索完毕后取消城市j的标记 </span></span><br><span class="line">&#125; </span><br><span class="line">&#125; <span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//这里先把所有路径初始为无穷大</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line">G[i][j]=<span class="number">999</span>;<span class="comment">//999即为无穷大 </span></span><br><span class="line">&#125;</span><br><span class="line">   <span class="built_in">init</span>();<span class="comment">//初始化 </span></span><br><span class="line">    book[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;MIN;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图 </tag>
            
            <tag> 最短路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字串分值</title>
      <link href="/2023/01/15/%E5%AD%97%E4%B8%B2%E5%88%86%E5%80%BC/"/>
      <url>/2023/01/15/%E5%AD%97%E4%B8%B2%E5%88%86%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="子串分值"><a href="#子串分值" class="headerlink" title="子串分值"></a>子串分值</h1><p>(223)</p><p>(4)</p><p><a class="link"   href="https://www.lanqiao.cn/questions/topics/28/" >**<i class="fas fa-external-link-alt"></i></a></p><p>**</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>对于一个字符串 SS，我们定义 SS 的分值 f(S)f(S) 为 SS 中恰好出现一次的字符个数。例如 f(aba) &#x3D; 1，f(abc) &#x3D; 3, f(aaa) &#x3D; 0f(aba)&#x3D;1，f(abc)&#x3D;3,f(aaa)&#x3D;0。</p><p>现在给定一个字符串 S_{0 \cdots n − 1}S0⋯n−1（长度为 nn，1 \leq n \leq 10^51≤n≤105），请你计算对于所有 SS 的非空子串 S_{i \cdots j}(0 ≤ i ≤ j &lt; n)Si⋯j(0≤i≤j&lt;n)，f(S_{i \cdots j})f(Si⋯j) 的和是多少。</p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入一行包含一个由小写字母组成的字符串 SS。</p><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一个整数表示答案。</p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote><p>输入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ababc</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">21</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><ul><li>最大运行时间：1s</li><li>最大运行内存: 256M</li></ul><p>总通过次数: 1164  |  总提交次数: 1693  |  通过率: 68.7%</p><p>难度:   标签: 模拟, 规律, 2020, 省赛</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//这个题目有点类似于隔板问题 计算每个字母的贡献度</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这道题应该不是要我们暴力做出来，主要是要计算每个位置上的字符对S分支的贡献度，以ababc位例，第一个a只有在&quot;a&quot;,&quot;ab&quot;中才是唯一的a,其贡献度为a,而对于最后一个c,其在&quot;ababc&quot;,&quot;babc&quot;,&quot;abc&quot;,&quot;bc&quot;,&quot;c&quot;中都有1点贡献度，于是只要遍历一遍，计算每个字符上的贡献度即可，需要注意这里的每个字符为不同位置上的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">贡献度的计算 一个字符的贡献度便是包含一个此字符的子字符串个数,公式即是（左边的间隔+1）*(右边的间隔+1)*/</span> </span><br><span class="line">string s1;</span><br><span class="line">cin&gt;&gt;s1;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> left_jiange=<span class="number">1</span>,right_jiange=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s1.<span class="built_in">length</span>();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> s2=s1[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l=i<span class="number">-1</span>;l&gt;=<span class="number">0</span>;l--)<span class="comment">//每次向左边查找，每向左移动一次 左间隔加一 </span></span><br><span class="line">&#123; <span class="keyword">if</span>(l&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span>(s1[l]==s2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; </span><br><span class="line">left_jiange++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> r=i+<span class="number">1</span>;r&lt;s1.<span class="built_in">length</span>();r++)</span><br><span class="line">&#123;</span><br><span class="line">      <span class="keyword">if</span>(r&gt;=s1.<span class="built_in">length</span>())</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="keyword">if</span>(s1[r]==s2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">right_jiange++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum+=left_jiange*right_jiange;</span><br><span class="line">left_jiange=<span class="number">1</span>;</span><br><span class="line">right_jiange=<span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特别数的和</title>
      <link href="/2023/01/15/%E7%89%B9%E5%88%AB%E6%95%B0%E7%9A%84%E5%92%8C/"/>
      <url>/2023/01/15/%E7%89%B9%E5%88%AB%E6%95%B0%E7%9A%84%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="特别数的和"><a href="#特别数的和" class="headerlink" title="特别数的和"></a>特别数的和</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>小明对数位中含有 2、0、1、9 的数字很感兴趣（不包括前导 0），在 1 到 40 中这样的数包括 1、2、9、10 至 32、39 和 40，共 28 个，他们的和是 574。</p><p>请问，在 1 到 nn 中，所有这样的数的和是多少？</p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入格式：</p><p>输入一行包含两个整数 n（1 \leq n \leq 10^4）n（1≤n≤104）。</p><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一行，包含一个整数，表示满足条件的数的和。</p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote><p>输入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">40</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">574</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><ul><li>最大运行时间：1s</li><li>最大运行内存: 256M</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">sum</span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,n+<span class="number">1</span>):</span><br><span class="line">    m=<span class="built_in">str</span>(i)</span><br><span class="line">    <span class="keyword">if</span>((<span class="string">&#x27;2&#x27;</span> <span class="keyword">in</span> m )<span class="keyword">or</span> ( <span class="string">&#x27;0&#x27;</span> <span class="keyword">in</span> m) <span class="keyword">or</span>(<span class="string">&#x27;1&#x27;</span> <span class="keyword">in</span> m) <span class="keyword">or</span>(<span class="string">&#x27;9&#x27;</span> <span class="keyword">in</span> m)):</span><br><span class="line">        <span class="built_in">sum</span>+=i</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//特别数的和</span></span><br><span class="line"><span class="comment">//用c++做也行 就是转换成字符型 用string库里的find函数看看能不能找到</span></span><br><span class="line"><span class="comment">//众所周知find函数要是有这个字符返回这个位置的迭代器 否则返回最后末位置</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">string s1=<span class="built_in">to_string</span>(i);</span><br><span class="line"><span class="keyword">if</span>(s1.<span class="built_in">find</span>(<span class="string">&#x27;2&#x27;</span>)&lt;s1.<span class="built_in">length</span>()||s1.<span class="built_in">find</span>(<span class="string">&#x27;0&#x27;</span>)&lt;s1.<span class="built_in">length</span>()||s1.<span class="built_in">find</span>(<span class="string">&#x27;1&#x27;</span>)&lt;s1.<span class="built_in">length</span>()||s1.<span class="built_in">find</span>(<span class="string">&#x27;9&#x27;</span>)&lt;s1.<span class="built_in">length</span>())</span><br><span class="line">sum+=i;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;sum;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数学三角形</title>
      <link href="/2023/01/15/%E6%95%B0%E5%AD%A6%E4%B8%89%E8%A7%92%E5%BD%A2/"/>
      <url>/2023/01/15/%E6%95%B0%E5%AD%A6%E4%B8%89%E8%A7%92%E5%BD%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="数字三角形"><a href="#数字三角形" class="headerlink" title="数字三角形"></a>数字三角形</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="https://doc.shiyanlou.com/courses/uid1580206-20210224-1614154063705" alt="图片描述"></p><p>上图给出了一个数字三角形。从三角形的顶部到底部有很多条不同的路径。对于每条路径，把路径上面的数加起来可以得到一个和，你的任务就是找到最大的和。</p><p>路径上的每一步只能从一个数走到下一层和它最近的左边的那个数或者右 边的那个数。此外，向左下走的次数与向右下走的次数相差不能超过 1。</p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入的第一行包含一个整数 N\ (1 \leq N \leq 100)N (1≤N≤100)，表示三角形的行数。</p><p>下面的 NN 行给出数字三角形。数字三角形上的数都是 0 至 100 之间的整数。</p><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一个整数，表示答案。</p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote><p>输入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">7</span><br><span class="line">3 8</span><br><span class="line">8 1 0</span><br><span class="line">2 7 4 4</span><br><span class="line">4 5 2 6 5</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">27</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><ul><li>最大运行时间：1s</li><li>最大运行内存: 256M</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">/*思路：1.把输入的数字存为数组；</span></span><br><span class="line"><span class="comment">2.从第二行开始计算相加和；</span></span><br><span class="line"><span class="comment">3.如果是每一行的第一个数，则与上一行第一个数取和；</span></span><br><span class="line"><span class="comment">4.如果是每一行的最后一个数，则与上一行的最后一个数取和；</span></span><br><span class="line"><span class="comment">5.如果不是上面的情况，则与上一行对应的两个数中最大的取和；</span></span><br><span class="line"><span class="comment">6.由于要求向左向右的次数相差不超过1，</span></span><br><span class="line"><span class="comment">所以只有最后一行的中间的一个或者两个数字符合要求，所以输出中间最大的数。*/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 请在此输入您的代码</span></span><br><span class="line">  <span class="type">int</span> n;<span class="comment">//三角形的层数</span></span><br><span class="line">  cin&gt;&gt;n;</span><br><span class="line">  </span><br><span class="line">  vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;<span class="built_in">shuzu</span>(n);</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="comment">//初始化三角形</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=i;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">int</span> x;</span><br><span class="line">      cin&gt;&gt;x;</span><br><span class="line"></span><br><span class="line">      shuzu[i].<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp=shuzu;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="comment">//遍历初始化dp数组 </span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;<span class="keyword">continue</span>;&#125;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=i;j++)</span><br><span class="line">      &#123;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span>(j==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">dp[i][j]+=dp[i<span class="number">-1</span>][j];<span class="comment">//2.如果是每一行的第一个数，则与上一行第一个数取和；4.如果是每一行的最后一个数，则与上一行的最后一个数取和；</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(j==i)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j]+=dp[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果不是上面的情况，则与上一行对应的两个数中最大的取和；</span></span><br><span class="line">dp[i][j]+=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j],dp[i<span class="number">-1</span>][j<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>)</span><br><span class="line">  cout&lt;&lt;dp[n<span class="number">-1</span>][n/<span class="number">2</span>]&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  cout&lt;&lt;<span class="built_in">max</span>(dp[n<span class="number">-1</span>][n/<span class="number">2</span>],dp[n<span class="number">-1</span>][n/<span class="number">2</span><span class="number">-1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数列求和</title>
      <link href="/2023/01/15/%E6%95%B0%E5%88%97%E6%B1%82%E5%92%8C/"/>
      <url>/2023/01/15/%E6%95%B0%E5%88%97%E6%B1%82%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="数列求值"><a href="#数列求值" class="headerlink" title="数列求值"></a>数列求值</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><strong>本题为填空题，只需要算出结果后，在代码中使用输出语句将所填结果输出即可。</strong></p><p>给定数列 1, 1, 1, 3, 5, 9, 17, \cdots1,1,1,3,5,9,17,⋯，从第 44 项开始，每项都是前 33 项的和。</p><p>求第 2019032420190324 项的最后 44 位数字。</p><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><ul><li>最大运行时间：1s</li><li>最大运行内存: 128M</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 10000 </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max 20190324</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 感觉有点像dp</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> a=<span class="number">1</span>,b=<span class="number">1</span>,c=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">4</span>;i&lt;=max;i++)</span><br><span class="line">  &#123;sum=(a+b+c)%mod;</span><br><span class="line">  a=b;</span><br><span class="line">  b=c;</span><br><span class="line">  c=sum;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;第&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;个数字是&quot;</span>&lt;&lt;sum&lt;&lt;endl; </span><br><span class="line">  </span><br><span class="line">  &#125; </span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>棋盘放麦子</title>
      <link href="/2023/01/15/%E6%A3%8B%E7%9B%98%E6%94%BE%E9%BA%A6%E5%AD%90/"/>
      <url>/2023/01/15/%E6%A3%8B%E7%9B%98%E6%94%BE%E9%BA%A6%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h1 id="棋盘放麦子"><a href="#棋盘放麦子" class="headerlink" title="棋盘放麦子"></a>棋盘放麦子</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><strong>本题为填空题，只需要算出结果后，在代码中使用输出语句将所填结果输出即可。</strong></p><p>你一定听说过这个故事。国王对发明国际象棋的大臣很佩服，问他要什么报酬，大臣说：请在第 11 个棋盘格放 11 粒麦子，在第 22 个棋盘格放 22 粒麦子，在第 33 个棋盘格放 44 粒麦子，在第 44 个棋盘格放 88 粒麦子，……后一格的数字是前一格的两倍，直到放完所有棋盘格（国际象棋共有 6464 格）。</p><p>国王以为他只是想要一袋麦子而已，哈哈大笑。</p><p>当时的条件下无法准确计算，但估算结果令人吃惊：即使全世界都铺满麦子也不够用！</p><p>请你借助计算机准确地计算，到底需要多少粒麦子。</p><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><ul><li>最大运行时间：1s</li><li>最大运行内存: 128M</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> s1=<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">64</span>)<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"> cout&lt;&lt;s1;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 超大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>年号字串</title>
      <link href="/2023/01/15/%E5%B9%B4%E5%8F%B7%E5%AD%97%E4%B8%B2/"/>
      <url>/2023/01/15/%E5%B9%B4%E5%8F%B7%E5%AD%97%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="年号字串"><a href="#年号字串" class="headerlink" title="年号字串"></a>年号字串</h1><p>(257)</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><strong>本题为填空题，只需要算出结果后，在代码中使用输出语句将所填结果输出即可。</strong></p><p>小明用字母 A 对应数字 1，B 对应 2，以此类推，用 Z 对应 26。对于 27 以上的数字，小明用两位或更长位的字符串来对应，例如 AA 对应 27，AB 对应28，AZ 对应 52，LQ 对应 329。</p><p>请问 2019 对应的字符串是什么？</p><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><ul><li>最大运行时间：1s</li><li>最大运行内存: 128M</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//年号子串实质上就是所谓的26进制转化</span></span><br><span class="line"><span class="type">int</span> n=<span class="number">2019</span>;</span><br><span class="line"><span class="comment">//cin&gt;&gt;n;</span></span><br><span class="line">string s1=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">char</span> m=<span class="string">&#x27;A&#x27;</span>;<span class="comment">//A的阿斯克码是65</span></span><br><span class="line"><span class="type">char</span> A[<span class="number">27</span>]=&#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">26</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">A[i]=i+<span class="number">64</span>;<span class="comment">//这样第一个位置为其他位置为 </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//int p1=m;</span></span><br><span class="line"><span class="comment">//cout&lt;&lt; p1;</span></span><br><span class="line"><span class="comment">/*for(const auto &amp;s2:A)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout&lt;&lt;s2&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(n!=<span class="number">0</span>)</span><br><span class="line">&#123;s1+=A[n%<span class="number">26</span>];</span><br><span class="line">n/=<span class="number">26</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">reverse</span>(s1.<span class="built_in">begin</span>(),s1.<span class="built_in">end</span>());</span><br><span class="line">cout&lt;&lt;s1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日期 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回文日期</title>
      <link href="/2023/01/15/%E5%9B%9E%E6%96%87%E6%97%A5%E6%9C%9F/"/>
      <url>/2023/01/15/%E5%9B%9E%E6%96%87%E6%97%A5%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="回文日期-对不对不知道，主要是那个oj太拉胯"><a href="#回文日期-对不对不知道，主要是那个oj太拉胯" class="headerlink" title="回文日期(对不对不知道，主要是那个oj太拉胯)"></a>回文日期(对不对不知道，主要是那个oj太拉胯)</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>2020 年春节期间，有一个特殊的日期引起了大家的注意：2020 年 2 月 2 日。因为如果将这个日期按 “yyyymmdd” 的格式写成一个 8 位数是 20200202，恰好是一个回文数。我们称这样的日期是回文日期。</p><p>有人表示 20200202 是 “千年一遇” 的特殊日子。对此小明很不认同，因为不到 2 年之后就是下一个回文日期：20211202 即 2021 年 12 月 2 日。</p><p>也有人表示 20200202 并不仅仅是一个回文日期，还是一个 ABABBABA 型的回文日期。对此小明也不认同，因为大约 100 年后就能遇到下一个 ABABBABA 型的回文日期：21211212 即 2121 年 12 月 12 日。算不上 “千年一遇”，顶多算 “千年两遇”。</p><p>给定一个 8 位数的日期，请你计算该日期之后下一个回文日期和下一个 ABABBABA 型的回文日期各是哪一天。</p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入包含一个八位整数 NN，表示日期。</p><p>对于所有评测用例，10000101 \leq N \leq 8999123110000101≤N≤89991231，保证 NN 是一个合法日期的 8 位数表示。</p><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出两行，每行 1 个八位数。第一行表示下一个回文日期，第二行表示下一个 ABABBABA 型的回文日期。</p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote><p>输入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">20200202</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">20211202</span><br><span class="line">21211212</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><ul><li>最大运行时间：1s</li><li>最大运行内存: 256M</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">  <span class="type">int</span> hash1[<span class="number">13</span>]=&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;; <span class="comment">//闰年 </span></span><br><span class="line">    <span class="type">int</span> hash2[<span class="number">13</span>]=&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">huiwen</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string s2 = <span class="built_in">to_string</span>(a);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=s2.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line">s2+=s2[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> shuzi=<span class="built_in">atoi</span>(s2.<span class="built_in">c_str</span>());</span><br><span class="line"><span class="keyword">return</span> shuzi;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">huiwen2</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> a=a*<span class="number">100</span>+a;</span><br><span class="line"> <span class="keyword">return</span>  <span class="built_in">huiwen</span>(a) ;</span><br><span class="line"> &#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="comment">//取前四位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=n/<span class="number">10000</span>+<span class="number">1</span>;;i++)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="type">int</span> answer=<span class="built_in">huiwen</span>(i);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(i/<span class="number">4</span>==<span class="number">0</span>&amp;&amp;i%<span class="number">100</span>!=<span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">  <span class="type">int</span> month=(answer%<span class="number">10000</span>)/<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">if</span>(month&lt;=<span class="number">12</span>)</span><br><span class="line">      &#123;<span class="keyword">if</span>((answer%<span class="number">1000000</span>)/<span class="number">10000</span>&lt;=hash1[month])</span><br><span class="line">      &#123;</span><br><span class="line">      cout&lt;&lt;answer&lt;&lt;endl;<span class="keyword">break</span>;</span><br><span class="line">     </span><br><span class="line">      &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="type">int</span> month=(answer%<span class="number">10000</span>)/<span class="number">100</span>;</span><br><span class="line">  <span class="keyword">if</span>(month&lt;=<span class="number">12</span>)</span><br><span class="line">    &#123;<span class="keyword">if</span>((answer%<span class="number">1000000</span>)/<span class="number">10000</span>&lt;=hash2[month])</span><br><span class="line">    &#123;</span><br><span class="line">    cout&lt;&lt;answer&lt;&lt;endl;<span class="keyword">break</span>;</span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    &#125;<span class="comment">//至此第一个回文数字结束</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=n/<span class="number">1000000</span>+<span class="number">1</span>;;i++)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="type">int</span> answer2=<span class="built_in">huiwen2</span>(i);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> answeryear=answer2/<span class="number">10000</span>;</span><br><span class="line">      <span class="keyword">if</span>(answeryear/<span class="number">4</span>==<span class="number">0</span>&amp;&amp;answeryear%<span class="number">100</span>!=<span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">  <span class="type">int</span> month=(answer2%<span class="number">10000</span>)/<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">if</span>(month&lt;=<span class="number">12</span>)</span><br><span class="line">      &#123;<span class="keyword">if</span>((answer2%<span class="number">1000000</span>)/<span class="number">10000</span>&lt;=hash1[month])</span><br><span class="line">      &#123;</span><br><span class="line">      cout&lt;&lt;answer2&lt;&lt;endl;<span class="keyword">break</span>;</span><br><span class="line">     </span><br><span class="line">      &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="type">int</span> month=(answer2%<span class="number">10000</span>)/<span class="number">100</span>;</span><br><span class="line">  <span class="keyword">if</span>(month&lt;=<span class="number">12</span>)</span><br><span class="line">    &#123;<span class="keyword">if</span>((answer2%<span class="number">1000000</span>)/<span class="number">10000</span>&lt;=hash2[month])</span><br><span class="line">    &#123;</span><br><span class="line">    cout&lt;&lt;answer2&lt;&lt;endl;<span class="keyword">break</span>;</span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    &#125;<span class="comment">//第二个回文数字结束 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日期 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>格子刷油漆</title>
      <link href="/2023/01/15/%E6%A0%BC%E5%AD%90%E5%88%B7%E6%B2%B9%E6%BC%86/"/>
      <url>/2023/01/15/%E6%A0%BC%E5%AD%90%E5%88%B7%E6%B2%B9%E6%BC%86/</url>
      
        <content type="html"><![CDATA[<h1 id="格子刷油漆"><a href="#格子刷油漆" class="headerlink" title="格子刷油漆"></a>格子刷油漆</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>X 国的一段古城墙的顶端可以看成 2\times N2×N 个格子组成的矩形（如下图所示），现需要把这些格子刷上保护漆。</p><p><img src="https://doc.shiyanlou.com/courses/uid1580206-20210202-1612251487413" alt="img"></p><p>你可以从任意一个格子刷起，刷完一格，可以移动到和它相邻的格子（对角相邻也算数），但不能移动到较远的格子（因为油漆未干不能踩！）</p><p>比如：a d b c e f 就是合格的刷漆顺序。c e f d a b 是另一种合适的方案。</p><p>当已知 NN 时，求总的方案数。当 NN 较大时，结果会迅速增大，请把结果对 10^9+7109+7 取模。</p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入数据为一个正整数（不大于 1000）。</p><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出数据为一个正整数。</p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote><p>输入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">24</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><ul><li>最大运行时间：1s</li><li>最大运行内存: 256M</li></ul><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p><img src="C:/Users/%E6%9D%8E%E5%BB%BA%E4%B8%9A/AppData/Roaming/Tencent/Users/2548154814/QQ/WinTemp/RichOle/_%7D9QTEBYV4$A(LC61RCBJ)T.png" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[<span class="number">100000</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> b[<span class="number">100000</span>];</span><br><span class="line">a[<span class="number">1</span>]=<span class="number">1</span>;a[<span class="number">2</span>]=<span class="number">6</span>;b[<span class="number">1</span>]=<span class="number">1</span>;b[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> N;cin&gt;&gt;N; </span><br><span class="line"><span class="keyword">if</span>(N==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(N==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;24&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=N;i++)</span><br><span class="line">&#123;  b[i]=<span class="number">2</span>*b[i<span class="number">-1</span>];<span class="comment">//初始化b </span></span><br><span class="line">a[i]=<span class="number">4</span>*a[i<span class="number">-2</span>]+<span class="number">2</span>*a[i<span class="number">-1</span>]+b[i];<span class="comment">//初始化a </span></span><br><span class="line">b[i]%=mod;</span><br><span class="line">a[i]%=mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum1=<span class="number">0</span>;</span><br><span class="line">sum1=<span class="number">4</span>*a[N]%mod;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=N<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"> sum2+=<span class="number">2</span>*(b[N-i+<span class="number">1</span>]*<span class="number">2</span>*a[i<span class="number">-1</span>]%mod+b[i]*<span class="number">2</span>*a[N-i]%mod) ;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;(sum1+sum2)%mod&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日期 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/2023/01/15/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2023/01/15/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h3 id="动态规划-1"><a href="#动态规划-1" class="headerlink" title="动态规划"></a><strong>动态规划</strong></h3><p>（英语：Dynamic programming，简称 DP）是一种在数学、管理科学、计算机科学、经济学和生物信息学中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。</p><p>动态规划不是某一种具体的算法，而是一种算法思想：若要解一个给定问题，我们需要解其不同部分（即子问题），再根据子问题的解以得出原问题的解。</p><p>应用这种算法思想解决问题的可行性，对子问题与原问题的关系，以及子问题之间的关系这两方面有一些要求，它们分别对应了最优子结构和重复子问题。</p><h3 id="最优子结构"><a href="#最优子结构" class="headerlink" title="最优子结构"></a>最优子结构</h3><p>最优子结构规定的是子问题与原问题的关系</p><p>动态规划要解决的都是一些问题的最优解，即从很多解决问题的方案中找到最优的一个。当我们在求一个问题最优解的时候，如果可以把这个问题分解成多个子问题，然后递归地找到每个子问题的最优解，最后通过一定的数学方法对各个子问题的最优解进行组合得出最终的结果。总结来说就是一个问题的最优解是由它的各个子问题的最优解决定的。</p><p>将子问题的解进行组合可以得到原问题的解是动态规划可行性的关键。在解题中一般用状态转移方程描述这种组合。例如原问题的解为 f(n)f(n)，其中 f(n)f(n) 也叫状态。状态转移方程</p><p>$$<br>f(n) &#x3D; f(n - 1) + f(n - 2)f(n)&#x3D;f(n−1)+f(n−2)<br>$$<br>描述了一种原问题与子问题的组合关系 。在原问题上有一些选择，不同选择可能对应不同的子问题或者不同的组合方式。例如</p><p><img src="C:/Users/%E6%9D%8E%E5%BB%BA%E4%B8%9A/Desktop/QQ%E5%9B%BE%E7%89%8720220202172121.png" alt="QQ图片20220202172121"></p><p>n&#x3D;2k 和 n &#x3D; 2k + 1n&#x3D;2k+1 对应了原问题 n 上不同的选择，分别对应了不同的子问题和组合方式。</p><p>找到了最优子结构，也就能推导出一个状态转移方程 f(n)f(n)，通过这个状态转移方程，我们能很快的写出问题的递归实现方法。</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/06/1-1.png" alt="img"></p><h3 id="重复子问题"><a href="#重复子问题" class="headerlink" title="重复子问题"></a>重复子问题</h3><p>重复子问题规定的是子问题与子问题的关系。</p><p>当我们在递归地寻找每个子问题的最优解的时候，有可能会重复地遇到一些更小的子问题，而且这些子问题会重叠地出现在子问题里，出现这样的情况，会有很多重复的计算，动态规划可以保证每个重叠的子问题只会被求解一次。当重复的问题很多的时候，动态规划可以减少很多重复的计算。</p><p>重复子问题不是保证解的正确性必须的，但是如果递归求解子问题时，没有出现重复子问题，则没有必要用动态规划，直接普通的递归就可以了。</p><p>例如，斐波那契问题的状态转移方程</p><p> <strong>f(n) &#x3D; f(n - 1) + f(n - 2)f(n)&#x3D;f(n−1)+f(n−2)。</strong></p><p>在求 f(5)f(5) 时，需要先求子问题 f(4)f(4) 和 f(3)f(3)，得到结果后再组合成原问题 f(5)f(5) 的解。递归地求 f(4)f(4) 时，又要先求子问题 f(3)f(3) 和 f(2)f(2) ，这里的 f(3)f(3) 与求 f(5)f(5) 时的子问题重复了。</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/09/1-2.png" alt="img"></p><p>解决动态规划问题的核心：找出子问题及其子问题与原问题的关系</p><p>找到了子问题以及子问题与原问题的关系，就可以递归地求解子问题了。但重叠的子问题使得直接递归会有很多重复计算，于是就想到记忆化递归法：若能事先确定子问题的范围就可以建表存储子问题的答案。</p><p>动态规划算法中关于最优子结构和重复子问题的理解的<strong>关键点</strong>：</p><p>1.证明问题的方案中包含一种选择，选择之后留下一个或多个子问题<br>2.设计子问题的递归描述方式<br>3.证明对原问题的最优解包括了对所有子问题的最优解<br>4.证明子问题是重叠的（这一步不是动态规划正确性必需的，但是如果子问题无重叠，则效率与一般递归是相同的）</p><h3 id="动态规划与其它算法的关系"><a href="#动态规划与其它算法的关系" class="headerlink" title="动态规划与其它算法的关系"></a>动态规划与其它算法的关系</h3><p>这一章我们将会介绍分治和贪心算法的核心思想，并与动态规划算法进行比较。</p><h4 id="分治"><a href="#分治" class="headerlink" title="分治"></a>分治</h4><p>解决分治问题的时候，思路就是想办法把问题的规模减小，有时候减小一个，有时候减小一半，然后将每个小问题的解以及当前的情况组合起来得出最终的结果。例如归并排序和快速排序，归并排序将要排序的数组平均地分成两半，快速排序将数组随机地分成两半。然后不断地对它们递归地进行处理。</p><p>这里存在有最优的子结构，即原数组的排序结果是在子数组排序的结果上组合出来的，但是不存在重复子问题，因为不断地对待排序的数组进行对半分的时候，两半边的数据并不重叠，分别解决左半边和右半边的两个子问题的时候，没有子问题重复出现，这是动态规划和分治的区别。</p><h4 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h4><p>关于最优子结构</p><p>贪心：每一步的最优解一定包含上一步的最优解，上一步之前的最优解无需记录<br>动态规划：全局最优解中一定包含某个局部最优解，但不一定包含上一步的局部最优解，因此需要记录之前的所有的局部最优解<br>关于子问题最优解组合成原问题最优解的组合方式</p><p>贪心：如果把所有的子问题看成一棵树的话，贪心从根出发，每次向下遍历最优子树即可，这里的最优是贪心意义上的最优。此时不需要知道一个节点的所有子树情况，于是构不成一棵完整的树<br>动态规划：动态规划需要对每一个子树求最优解，直至下面的每一个叶子的值，最后得到一棵完整的树，在所有子树都得到最优解后，将他们组合成答案<br>结果正确性</p><p><img src="C:/Users/%E6%9D%8E%E5%BB%BA%E4%B8%9A/AppData/Roaming/Tencent/Users/2548154814/QQ/WinTemp/RichOle/06J79F%5DO3J68(X1Z)0M@PPT.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递增数列</title>
      <link href="/2023/01/15/%E9%80%92%E5%A2%9E%E6%95%B0%E5%88%97/"/>
      <url>/2023/01/15/%E9%80%92%E5%A2%9E%E6%95%B0%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h3 id="递增序列"><a href="#递增序列" class="headerlink" title="递增序列"></a>递增序列</h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><strong>本题为填空题，只需要算出结果后，在代码中使用输出语句将所填结果输出即可。</strong></p><p>对于一个字母矩阵，我们称矩阵中的一个递增序列是指在矩阵中找到两个字母，它们在同一行，同一列，或者在同一 4545 度的斜线上，这两个字母从左向右看、或者从上向下看是递增的。</p><p>例如，如下矩阵中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LANN</span><br><span class="line">QIAO</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有LN、LN、AN、AN、IO、AO、LQ、AI、NO、NO、AQ、IN、ANLN、LN、AN、AN、IO、AO、LQ、AI、NO、NO、AQ、IN、AN 等 1313 个 递增序列。注意当两个字母是从左下到右上排列时，从左向右看和从上向下看 是不同的顺序。</p><p>对于下面的 3030 行 5050 列的矩阵，请问总共有多少个递增序列？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">VLPWJVVNNZSWFGHSFRBCOIJTPYNEURPIGKQGPSXUGNELGRVZAG</span><br><span class="line">SDLLOVGRTWEYZKKXNKIRWGZWXWRHKXFASATDWZAPZRNHTNNGQF</span><br><span class="line">ZGUGXVQDQAEAHOQEADMWWXFBXECKAVIGPTKTTQFWSWPKRPSMGA</span><br><span class="line">BDGMGYHAOPPRRHKYZCMFZEDELCALTBSWNTAODXYVHQNDASUFRL</span><br><span class="line">YVYWQZUTEPFSFXLTZBMBQETXGXFUEBHGMJKBPNIHMYOELYZIKH</span><br><span class="line">ZYZHSLTCGNANNXTUJGBYKUOJMGOGRDPKEUGVHNZJZHDUNRERBU</span><br><span class="line">XFPTZKTPVQPJEMBHNTUBSMIYEGXNWQSBZMHMDRZZMJPZQTCWLR</span><br><span class="line">ZNXOKBITTPSHEXWHZXFLWEMPZTBVNKNYSHCIQRIKQHFRAYWOPG</span><br><span class="line">MHJKFYYBQSDPOVJICWWGGCOZSBGLSOXOFDAADZYEOBKDDTMQPA</span><br><span class="line">VIDPIGELBYMEVQLASLQRUKMXSEWGHRSFVXOMHSJWWXHIBCGVIF</span><br><span class="line">GWRFRFLHAMYWYZOIQODBIHHRIIMWJWJGYPFAHZZWJKRGOISUJC</span><br><span class="line">EKQKKPNEYCBWOQHTYFHHQZRLFNDOVXTWASSQWXKBIVTKTUIASK</span><br><span class="line">PEKNJFIVBKOZUEPPHIWLUBFUDWPIDRJKAZVJKPBRHCRMGNMFWW</span><br><span class="line">CGZAXHXPDELTACGUWBXWNNZNDQYYCIQRJCULIEBQBLLMJEUSZP</span><br><span class="line">RWHHQMBIJWTQPUFNAESPZHAQARNIDUCRYQAZMNVRVZUJOZUDGS</span><br><span class="line">PFGAYBDEECHUXFUZIKAXYDFWJNSAOPJYWUIEJSCORRBVQHCHMR</span><br><span class="line">JNVIPVEMQSHCCAXMWEFSYIGFPIXNIDXOTXTNBCHSHUZGKXFECL</span><br><span class="line">YZBAIIOTWLREPZISBGJLQDALKZUKEQMKLDIPXJEPENEIPWFDLP</span><br><span class="line">HBQKWJFLSEXVILKYPNSWUZLDCRTAYUUPEITQJEITZRQMMAQNLN</span><br><span class="line">DQDJGOWMBFKAIGWEAJOISPFPLULIWVVALLIIHBGEZLGRHRCKGF</span><br><span class="line">LXYPCVPNUKSWCCGXEYTEBAWRLWDWNHHNNNWQNIIBUCGUJYMRYW</span><br><span class="line">CZDKISKUSBPFHVGSAVJBDMNPSDKFRXVVPLVAQUGVUJEXSZFGFQ</span><br><span class="line">IYIJGISUANRAXTGQLAVFMQTICKQAHLEBGHAVOVVPEXIMLFWIYI</span><br><span class="line">ZIIFSOPCMAWCBPKWZBUQPQLGSNIBFADUUJJHPAIUVVNWNWKDZB</span><br><span class="line">HGTEEIISFGIUEUOWXVTPJDVACYQYFQUCXOXOSSMXLZDQESHXKP</span><br><span class="line">FEBZHJAGIFGXSMRDKGONGELOALLSYDVILRWAPXXBPOOSWZNEAS</span><br><span class="line">VJGMAOFLGYIFLJTEKDNIWHJAABCASFMAKIENSYIZZSLRSUIPCJ</span><br><span class="line">BMQGMPDRCPGWKTPLOTAINXZAAJWCPUJHPOUYWNWHZAKCDMZDSR</span><br><span class="line">RRARTVHZYYCEDXJQNQAINQVDJCZCZLCQWQQIKUYMYMOVMNCBVY</span><br><span class="line">ABTCRRUXVGYLZILFLOFYVWFFBZNFWDZOADRDCLIRFKBFBHMAXX</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><ul><li>最大运行时间：1s</li><li>最大运行内存: 128M</li></ul><h2 id="代-码："><a href="#代-码：" class="headerlink" title="代 码："></a>代 码：</h2><p>一个简单的模拟题 注意一下题目 左下到右上的顺序不一样  所以只要不等于就可以了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">VLPWJVVNNZSWFGHSFRBCOIJTPYNEURPIGKQGPSXUGNELGRVZAG</span></span><br><span class="line"><span class="comment">SDLLOVGRTWEYZKKXNKIRWGZWXWRHKXFASATDWZAPZRNHTNNGQF</span></span><br><span class="line"><span class="comment">ZGUGXVQDQAEAHOQEADMWWXFBXECKAVIGPTKTTQFWSWPKRPSMGA</span></span><br><span class="line"><span class="comment">BDGMGYHAOPPRRHKYZCMFZEDELCALTBSWNTAODXYVHQNDASUFRL</span></span><br><span class="line"><span class="comment">YVYWQZUTEPFSFXLTZBMBQETXGXFUEBHGMJKBPNIHMYOELYZIKH</span></span><br><span class="line"><span class="comment">ZYZHSLTCGNANNXTUJGBYKUOJMGOGRDPKEUGVHNZJZHDUNRERBU</span></span><br><span class="line"><span class="comment">XFPTZKTPVQPJEMBHNTUBSMIYEGXNWQSBZMHMDRZZMJPZQTCWLR</span></span><br><span class="line"><span class="comment">ZNXOKBITTPSHEXWHZXFLWEMPZTBVNKNYSHCIQRIKQHFRAYWOPG</span></span><br><span class="line"><span class="comment">MHJKFYYBQSDPOVJICWWGGCOZSBGLSOXOFDAADZYEOBKDDTMQPA</span></span><br><span class="line"><span class="comment">VIDPIGELBYMEVQLASLQRUKMXSEWGHRSFVXOMHSJWWXHIBCGVIF</span></span><br><span class="line"><span class="comment">GWRFRFLHAMYWYZOIQODBIHHRIIMWJWJGYPFAHZZWJKRGOISUJC</span></span><br><span class="line"><span class="comment">EKQKKPNEYCBWOQHTYFHHQZRLFNDOVXTWASSQWXKBIVTKTUIASK</span></span><br><span class="line"><span class="comment">PEKNJFIVBKOZUEPPHIWLUBFUDWPIDRJKAZVJKPBRHCRMGNMFWW</span></span><br><span class="line"><span class="comment">CGZAXHXPDELTACGUWBXWNNZNDQYYCIQRJCULIEBQBLLMJEUSZP</span></span><br><span class="line"><span class="comment">RWHHQMBIJWTQPUFNAESPZHAQARNIDUCRYQAZMNVRVZUJOZUDGS</span></span><br><span class="line"><span class="comment">PFGAYBDEECHUXFUZIKAXYDFWJNSAOPJYWUIEJSCORRBVQHCHMR</span></span><br><span class="line"><span class="comment">JNVIPVEMQSHCCAXMWEFSYIGFPIXNIDXOTXTNBCHSHUZGKXFECL</span></span><br><span class="line"><span class="comment">YZBAIIOTWLREPZISBGJLQDALKZUKEQMKLDIPXJEPENEIPWFDLP</span></span><br><span class="line"><span class="comment">HBQKWJFLSEXVILKYPNSWUZLDCRTAYUUPEITQJEITZRQMMAQNLN</span></span><br><span class="line"><span class="comment">DQDJGOWMBFKAIGWEAJOISPFPLULIWVVALLIIHBGEZLGRHRCKGF</span></span><br><span class="line"><span class="comment">LXYPCVPNUKSWCCGXEYTEBAWRLWDWNHHNNNWQNIIBUCGUJYMRYW</span></span><br><span class="line"><span class="comment">CZDKISKUSBPFHVGSAVJBDMNPSDKFRXVVPLVAQUGVUJEXSZFGFQ</span></span><br><span class="line"><span class="comment">IYIJGISUANRAXTGQLAVFMQTICKQAHLEBGHAVOVVPEXIMLFWIYI</span></span><br><span class="line"><span class="comment">ZIIFSOPCMAWCBPKWZBUQPQLGSNIBFADUUJJHPAIUVVNWNWKDZB</span></span><br><span class="line"><span class="comment">HGTEEIISFGIUEUOWXVTPJDVACYQYFQUCXOXOSSMXLZDQESHXKP</span></span><br><span class="line"><span class="comment">FEBZHJAGIFGXSMRDKGONGELOALLSYDVILRWAPXXBPOOSWZNEAS</span></span><br><span class="line"><span class="comment">VJGMAOFLGYIFLJTEKDNIWHJAABCASFMAKIENSYIZZSLRSUIPCJ</span></span><br><span class="line"><span class="comment">BMQGMPDRCPGWKTPLOTAINXZAAJWCPUJHPOUYWNWHZAKCDMZDSR</span></span><br><span class="line"><span class="comment">RRARTVHZYYCEDXJQNQAINQVDJCZCZLCQWQQIKUYMYMOVMNCBVY</span></span><br><span class="line"><span class="comment">ABTCRRUXVGYLZILFLOFYVWFFBZNFWDZOADRDCLIRFKBFBHMAXX</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> shuzu[<span class="number">30</span>][<span class="number">50</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">30</span>;i++)<span class="comment">//初始化矩阵 </span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">50</span>;j++)</span><br><span class="line">  &#123;<span class="type">char</span> s1;</span><br><span class="line">  cin&gt;&gt;s1;</span><br><span class="line">  <span class="type">int</span> a=s1;</span><br><span class="line">  shuzu[i][j]=a;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">   <span class="comment">/*输出矩阵 </span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;30;i++)//初始化矩阵 </span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">    for(int j=0;j&lt;50;j++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">    cout&lt;&lt;shuzu[i][j]&lt;&lt; &#x27; &#x27;;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  cout&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">  <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">   <span class="type">int</span> m;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">30</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">50</span>;j++)</span><br><span class="line">  &#123; m=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j+m&lt;<span class="number">50</span>)</span><br><span class="line">&#123;<span class="comment">//同一行的比较 </span></span><br><span class="line"><span class="keyword">if</span>(shuzu[i][j]&lt;shuzu[i][j+m])&#123;sum++;&#125; </span><br><span class="line">m++;</span><br><span class="line">&#125;</span><br><span class="line"> m=<span class="number">1</span>;<span class="comment">//同一列比较 </span></span><br><span class="line"><span class="keyword">while</span>(i+m&lt;<span class="number">30</span>)</span><br><span class="line">&#123;<span class="keyword">if</span>(shuzu[i][j]&lt;shuzu[i+m][j])</span><br><span class="line">&#123;sum++;&#125;</span><br><span class="line">m++;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> m=<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">while</span>(m+i&lt;<span class="number">30</span>&amp;&amp;m+j&lt;<span class="number">50</span>)<span class="comment">//左上到右下 </span></span><br><span class="line"> &#123;<span class="keyword">if</span>(shuzu[i][j]&lt;shuzu[i+m][j+m]) </span><br><span class="line"> &#123;</span><br><span class="line"> sum++;</span><br><span class="line"> &#125;</span><br><span class="line"> m++;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">30</span>;i++)<span class="comment">//左下到右上 </span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">50</span>;j++)</span><br><span class="line">    &#123;m=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i-m&gt;<span class="number">-1</span>&amp;&amp;m+j!=<span class="number">50</span>)</span><br><span class="line">    &#123;<span class="keyword">if</span>(shuzu[i][j]!=shuzu[i-m][j+m]) </span><br><span class="line"> &#123;</span><br><span class="line">sum++;</span><br><span class="line"> &#125;</span><br><span class="line">m++;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> cout&lt;&lt;sum&lt;&lt;endl; </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>等差素数列</title>
      <link href="/2023/01/15/%E7%AD%89%E5%B7%AE%E7%B4%A0%E6%95%B0%E5%88%97/"/>
      <url>/2023/01/15/%E7%AD%89%E5%B7%AE%E7%B4%A0%E6%95%B0%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="等差素数列"><a href="#等差素数列" class="headerlink" title="等差素数列"></a>等差素数列</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><strong>本题为填空题，只需要算出结果后，在代码中使用输出语句将所填结果输出即可。</strong></p><p>2,3,5,7,11,13,….2,3,5,7,11,13,…. 是素数序列。 类似：7,37,67,97,127,1577,37,67,97,127,157 这样完全由素数组成的等差数列，叫等差素数数列。</p><p>上边的数列公差为 3030，长度为 66。</p><p>20042004 年，格林与华人陶哲轩合作证明了：存在任意长度的素数等差数列。 这是数论领域一项惊人的成果！</p><p>有这一理论为基础，请你借助手中的计算机，满怀信心地搜索：</p><p>长度为 1010 的等差素数列，其公差最小值是多少？</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><p>很暴力，就是简单的枚举</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span> </span></span><br><span class="line"> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"> <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sushu</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">1</span> || a==<span class="number">2</span> || a==<span class="number">3</span>)    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">2</span>;j&lt;=<span class="built_in">sqrt</span>(a);j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a%j==<span class="number">0</span>)    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"><span class="comment">//有那么十个数 这是个数字除了他们自己和他本身无其他因数</span></span><br><span class="line"><span class="comment">//并且还是等差数列</span></span><br><span class="line"></span><br><span class="line">vector &lt;<span class="type">int</span>&gt;mem;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;<span class="number">1000</span>;i++)<span class="comment">//首元素 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">sushu</span>(i)) <span class="comment">//如果第一个元素是素数的话 </span></span><br><span class="line">&#123;</span><br><span class="line">array.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="type">int</span> top,D;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;array.<span class="built_in">size</span>();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> d=<span class="number">1</span>;d&lt;<span class="number">500</span>;d++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">sushu</span>(array[i]+d)&amp;&amp;<span class="built_in">sushu</span>(array[i]+<span class="number">2</span>*d)&amp;&amp;<span class="built_in">sushu</span>(array[i]+<span class="number">3</span>*d)&amp;&amp;<span class="built_in">sushu</span>(array[i]+<span class="number">4</span>*d)&amp;&amp;<span class="built_in">sushu</span>(array[i]+<span class="number">5</span>*d)&amp;&amp;<span class="built_in">sushu</span>(array[i]+<span class="number">6</span>*d)&amp;&amp;<span class="built_in">sushu</span>(array[i]+<span class="number">7</span>*d)&amp;&amp;<span class="built_in">sushu</span>(array[i]+<span class="number">8</span>*d)&amp;&amp;<span class="built_in">sushu</span>(array[i]+<span class="number">9</span>*d))</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;首元素是&quot;</span>&lt;&lt;array[i]&lt;&lt;endl;top=array[i];</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;公差是&quot;</span>&lt;&lt;d&lt;&lt;endl;D=d;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;top+i*D&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>等差数列</title>
      <link href="/2023/01/15/%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97/"/>
      <url>/2023/01/15/%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="等差数列"><a href="#等差数列" class="headerlink" title="等差数列"></a>等差数列</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>数学老师给小明出了一道等差数列求和的题目。但是粗心的小明忘记了一 部分的数列，只记得其中 NN 个整数。</p><p>现在给出这 NN 个整数，小明想知道包含这 NN 个整数的最短的等差数列有几项？</p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入的第一行包含一个整数 NN。</p><p>第二行包含 NN 个整数 A_1,A_2,··· ,A_NA1,A2,⋅⋅⋅,AN。(注意 A_1A1 ∼ A_NAN 并不一定是按等差数列中的顺序给出)</p><p>其中，2 \leq N \leq 10^5，0 \leq A_i \leq 10^92≤N≤105，0≤Ai≤109。</p><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一个整数表示答案。</p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote><p>输入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">2 6 4 10 20</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>样例说明： 包含 2、6、4、10、20 的最短的等差数列是 2、4、6、8、10、12、14、16、 18、20。</p></blockquote><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><ul><li>最大运行时间：1s</li><li>最大运行内存: 256M</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//这个题目需要排个序 遍历整个数组  找到相邻的最小公差  </span></span><br><span class="line"><span class="comment">//然后从最小值加多少个这个最小公差才能到达这个结果 </span></span><br><span class="line">  <span class="type">int</span> N;<span class="type">int</span> m;</span><br><span class="line">  cin&gt;&gt;N;</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt;array;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">  &#123;</span><br><span class="line">  </span><br><span class="line">  cin&gt;&gt;m;</span><br><span class="line">  array.<span class="built_in">push_back</span>(m);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">sort</span>(array.<span class="built_in">begin</span>(),array.<span class="built_in">end</span>());<span class="comment">//排序</span></span><br><span class="line">  <span class="keyword">if</span>(N==<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  cout&lt;&lt;<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="type">int</span> min_1=array[<span class="number">1</span>]-array[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N<span class="number">-1</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  min_1=<span class="built_in">min</span>(min_1,array[i+<span class="number">1</span>]-array[i]);</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">if</span>(min_1==<span class="number">0</span>)<span class="comment">//如果公差是0，直接输出N结束 </span></span><br><span class="line">  &#123;</span><br><span class="line">  cout&lt;&lt;N;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="type">int</span> sum=(array[N<span class="number">-1</span>]-array[<span class="number">0</span>])/min_1  +<span class="number">1</span>;</span><br><span class="line">    cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单词分析</title>
      <link href="/2023/01/15/%E5%8D%95%E8%AF%8D%E5%88%86%E6%9E%90/"/>
      <url>/2023/01/15/%E5%8D%95%E8%AF%8D%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="单词分析"><a href="#单词分析" class="headerlink" title="单词分析"></a>单词分析</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>小蓝正在学习一门神奇的语言，这门语言中的单词都是由小写英文字母组 成，有些单词很长，远远超过正常英文单词的长度。小蓝学了很长时间也记不住一些单词，他准备不再完全记忆这些单词，而是根据单词中哪个字母出现得最多来分辨单词。</p><p>现在，请你帮助小蓝，给了一个单词后，帮助他找到出现最多的字母和这 个字母出现的次数。</p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入一行包含一个单词，单词只由小写英文字母组成。</p><p>对于所有的评测用例，输入的单词长度不超过 1000。</p><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出两行，第一行包含一个英文字母，表示单词中出现得最多的字母是哪 个。如果有多个字母出现的次数相等，输出字典序最小的那个。</p><p>第二行包含一个整数，表示出现得最多的那个字母在单词中出现的次数。</p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><blockquote><p>输入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lanqiao</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h4><blockquote><p>输入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">longlonglongistoolong</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">o</span><br><span class="line">6</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><ul><li>最大运行时间：1s</li><li>最大运行内存: 256M</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>思路：用哈希表存储每个字母出现的次数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 哈希表</span></span><br><span class="line">  string s1;</span><br><span class="line">  cin&gt;&gt;s1;</span><br><span class="line">  <span class="type">int</span> hash[<span class="number">26</span>]=&#123;<span class="number">0</span>&#125;;<span class="comment">//小写字母 的ascii码为97</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s1.<span class="built_in">size</span>();i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">int</span> s=s1[i];</span><br><span class="line">    hash[s<span class="number">-97</span>]++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> max_xiabiao=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(hash[i]&gt;max)</span><br><span class="line">    &#123;</span><br><span class="line">      max=hash[i];</span><br><span class="line">      max_xiabiao=i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="type">char</span> answer=max_xiabiao+<span class="number">97</span>;</span><br><span class="line">   cout&lt;&lt;answer&lt;&lt;endl;</span><br><span class="line">   cout&lt;&lt;max;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
