<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>开发日志</title>
      <link href="/2023/01/15/%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/"/>
      <url>/2023/01/15/%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<p>that is a log of this blog.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>作物杂交</title>
      <link href="/2023/01/15/%E4%BD%9C%E7%89%A9%E6%9D%82%E4%BA%A4/"/>
      <url>/2023/01/15/%E4%BD%9C%E7%89%A9%E6%9D%82%E4%BA%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="作物杂交（深度优先遍历）"><a href="#作物杂交（深度优先遍历）" class="headerlink" title="作物杂交（深度优先遍历）"></a>作物杂交（深度优先遍历）</h1><p>(91)</p><p>(7)</p><p><a class="link"   href="https://www.lanqiao.cn/questions/topics/28/" >**<i class="fas fa-external-link-alt"></i></a></p><p>**</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>作物杂交是作物栽培中重要的一步。已知有 NN 种作物 (编号 11 至 NN )，第 ii 种作物从播种到成熟的时间为 T_iTi。作物之间两两可以进行杂交，杂交时间取两种中时间较长的一方。如作物 A 种植时间为 5 天，作物 B 种植时间为 7 天，则 AB 杂交花费的时间为 7 天。作物杂交会产生固定的作物，新产生的作物仍然属于 NN 种作物中的一种。</p><p>初始时，拥有其中 MM 种作物的种子 (数量无限，可以支持多次杂交)。同时可以进行多个杂交过程。求问对于给定的目标种子，最少需要多少天能够得到。</p><p>如存在 4 种作物 ABCD，各自的成熟时间为 5 天、7 天、3 天、8 天。初始拥有 AB 两种作物的种子，目标种子为 D，已知杂交情况为 A × B → C，A × C → D。则最短的杂交过程为：</p><p>第 1 天到第 7 天 (作物 B 的时间)，A × B → C。</p><p>第 8 天到第 12 天 (作物 A 的时间)，A × C → D。</p><p>花费 12 天得到作物 D 的种子。</p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入的第 1 行包含 4 个整数 N, M, K, TN,M,K,T，NN 表示作物种类总数 (编号 11 至 NN)，MM 表示初始拥有的作物种子类型数量，KK 表示可以杂交的方案数，TT 表示目标种子的编号。</p><p>第 2 行包含 NN 个整数，其中第 ii 个整数表示第 ii 种作物的种植时间 T_i\ (1 \leq T_i \leq 100)Ti (1≤Ti≤100)。</p><p>第 3 行包含 MM 个整数，分别表示已拥有的种子类型 K_j\ (1 \leq K_j \leq M)Kj (1≤Kj≤M)，K_jKj 两两不同。</p><p>第 4 至 KK + 3 行，每行包含 3 个整数 A, B,CA,B,C，表示第 AA 类作物和第 BB 类作物杂交可以获得第 CC 类作物的种子。</p><p>其中，1 \leq N \leq 2000, 2 \leq M \leq N, 1 \leq K \leq 10^5, 1 \leq T \leq N1≤N≤2000,2≤M≤N,1≤K≤105,1≤T≤N, 保证目标种子一定可以通过杂交得到。</p><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一个整数，表示得到目标种子的最短杂交时间。</p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote><p>输入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">6 2 4 6</span><br><span class="line">5 3 4 6 4 9</span><br><span class="line">1 2</span><br><span class="line">1 2 3</span><br><span class="line">1 3 4</span><br><span class="line">2 3 5</span><br><span class="line">4 5 6</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">16</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>样例说明</p></blockquote><p>第 1 天至第 5 天，将编号 1 与编号 2 的作物杂交，得到编号 3 的作物种子。</p><p>第 6 天至第 10 天，将编号 1 与编号 3 的作物杂交，得到编号 4 的作物种子。</p><p>第 6 天至第 9 天，将编号 2 与编号 3 的作物杂交，得到编号 5 的作物种子。</p><p>第 11 天至第 16 天，将编号 4 与编号 5 的作物杂交，得到编号 6 的作物种子。</p><p>总共花费 16 天。</p><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><ul><li>最大运行时间：2s</li><li>最大运行内存: 256M</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n, m, k, goal;</span><br><span class="line"><span class="type">int</span> t[MAXN];</span><br><span class="line"><span class="type">bool</span> have_k[MAXN];</span><br><span class="line"><span class="type">int</span> zajiao[MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> limit_time;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">father</span> &#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">int</span> u[MAXN];</span><br><span class="line">    <span class="type">int</span> v[MAXN];</span><br><span class="line">    <span class="type">int</span> limtime;</span><br><span class="line">&#125;fa[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span>&amp; a, <span class="type">int</span>&amp; b)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> tep = a; a = b; b = tep;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//N,M,K,T，</span></span><br><span class="line">    <span class="comment">//N 表示作物种类总数 (编号 11 至 N)，</span></span><br><span class="line">    <span class="comment">//M 表示初始拥有的作物种子类型数量，</span></span><br><span class="line">    <span class="comment">//K 表示可以杂交的方案数，T 表示目标种子的编号。</span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k &gt;&gt; goal;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; t[i];<span class="comment">//输入各个种子的培养时间 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> z;</span><br><span class="line">        cin &gt;&gt; z;</span><br><span class="line">        have_k[z] = <span class="literal">true</span>;<span class="comment">//当前拥有的种子 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">        <span class="type">int</span> u, v, w;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        zajiao[u][v] = zajiao[v][u] = w;<span class="comment">//zajiao[x][y]=z  x是父亲 y是母亲 z是孩子 </span></span><br><span class="line">        <span class="type">int</span> tep = ++fa[w].num;</span><br><span class="line">        <span class="keyword">if</span> (t[u] &lt; t[v])<span class="built_in">swap</span>(u, v);</span><br><span class="line">        fa[w].u[tep] = u;</span><br><span class="line">        fa[w].v[tep] = v;<span class="comment">//保证u的位置的数据是最大的 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[x].num == <span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//判断是否为叶结点 已知种子 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= fa[x].num; i++) &#123;</span><br><span class="line">        <span class="type">int</span> v = fa[x].v[i];<span class="comment">//第i个父亲 </span></span><br><span class="line">        <span class="type">int</span> u = fa[x].u[i];<span class="comment">//第i个母亲 </span></span><br><span class="line">        <span class="keyword">if</span> (!have_k[u]) &#123;<span class="comment">//如果没有这个种子 </span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">dfs</span>(u))<span class="keyword">continue</span>;<span class="comment">//如果这个结点   这个循环会被跳出 </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!have_k[v]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">dfs</span>(v))<span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!fa[x].limtime)<span class="comment">//如果目前得到这个种子的时间为0的话 那么对得到它的时间进行更新 </span></span><br><span class="line">            fa[x].limtime = <span class="built_in">max</span>(fa[u].limtime, fa[v].limtime) + <span class="built_in">max</span>(t[u], t[v]);</span><br><span class="line">            <span class="comment">//时间等于他的两个父节点所需要的最大时间   再加上这两个父节点种子培育时间的最大值 </span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            fa[x].limtime = <span class="built_in">min</span>(fa[x].limtime, <span class="built_in">max</span>(fa[u].limtime, fa[v].limtime) + <span class="built_in">max</span>(t[u], t[v]));</span><br><span class="line">    &#125;    </span><br><span class="line">    have_k[x] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">input</span>();</span><br><span class="line">    <span class="built_in">dfs</span>(goal);</span><br><span class="line">    cout &lt;&lt; fa[goal].limtime;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">6 2 4 6</span></span><br><span class="line"><span class="comment">5 3 4 6 4 9</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">1 2 3</span></span><br><span class="line"><span class="comment">1 3 4</span></span><br><span class="line"><span class="comment">2 3 5</span></span><br><span class="line"><span class="comment">4 5 6</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">seed</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;<span class="comment">//表示培育出该种子的方案数</span></span><br><span class="line"><span class="type">int</span> father[<span class="number">10000</span>]=&#123;<span class="number">0</span>&#125;; </span><br><span class="line"><span class="type">int</span> mather[<span class="number">10000</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> consume=<span class="number">0</span>;<span class="comment">//需要花费的时间 </span></span><br><span class="line">&#125;;seed shuzu[<span class="number">1000</span>]; </span><br><span class="line"><span class="type">int</span> total_seed,current_seed,plan,target;<span class="comment">//种子总数  现有种子数，方案数 目标种子 </span></span><br><span class="line"><span class="type">int</span> time2[<span class="number">10001</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">bool</span> have_seed[<span class="number">10001</span>]=&#123;<span class="number">0</span>&#125;;<span class="comment">//0表示有种子 1表示没有种子 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">input</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;total_seed&gt;&gt;current_seed&gt;&gt;plan&gt;&gt;target;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=total_seed;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;time2[i];&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=current_seed;i++)</span><br><span class="line">&#123;<span class="type">int</span> j;</span><br><span class="line">cin&gt;&gt;j;</span><br><span class="line">have_seed[j]=<span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=plan;i++)<span class="comment">//将方案装进数组 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> father,mather,children;</span><br><span class="line">cin&gt;&gt;father&gt;&gt;mather&gt;&gt;children;</span><br><span class="line"><span class="type">int</span> temp=++shuzu[children].sum;</span><br><span class="line">shuzu[children].father[temp]=father;</span><br><span class="line">shuzu[children].mather[temp]=mather;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout&lt;&lt;&quot;输入成功&quot;;</span></span><br><span class="line"> </span><br><span class="line">&#125; ; </span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> mubiao)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(shuzu[mubiao].sum==<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//如果这个结点已经有了就结束 并且返回false</span></span><br><span class="line"><span class="type">int</span> father,mather;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=shuzu[mubiao].sum;j++)</span><br><span class="line">&#123; father=shuzu[mubiao].father[j];</span><br><span class="line"> mather=shuzu[mubiao].mather[j];</span><br><span class="line">  <span class="keyword">if</span> (!have_seed[father]) &#123;<span class="comment">//如果没有这个种子 </span></span><br><span class="line">            <span class="built_in">dfs</span>(father);<span class="comment">//如果这个结点  </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!have_seed[mather]) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(mather);<span class="comment">//去找到母亲 </span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(shuzu[mubiao].consume==<span class="number">0</span>)<span class="comment">//培育出来父母所需要的最大值以及培育出来这个孩子需要的最大值 </span></span><br><span class="line">shuzu[mubiao].consume=<span class="built_in">max</span>(shuzu[father].consume,shuzu[mather].consume)+<span class="built_in">max</span>(time2[father],time2[mather]); </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">shuzu[mubiao].consume=<span class="built_in">min</span>(<span class="built_in">max</span>(shuzu[father].consume,shuzu[mather].consume)+<span class="built_in">max</span>(time2[father],time2[mather]),shuzu[mubiao].consume);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">have_seed[mubiao]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span>();</span><br><span class="line"><span class="built_in">dfs</span>(target);</span><br><span class="line"> cout&lt;&lt;shuzu[target].consume;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度优先遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最短路</title>
      <link href="/2023/01/15/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
      <url>/2023/01/15/%E6%9C%80%E7%9F%AD%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><strong>本题为填空题，只需要算出结果后，在代码中使用输出语句将所填结果输出即可。</strong></p><p>如下图所示，GG 是一个无向图，其中蓝色边的长度是 11、橘色边的长度是 22、绿色边的长度是 33。</p><p><img src="https://doc.shiyanlou.com/courses/uid1580206-20210312-1615537376560" alt="图片描述"></p><p>则从 AA 到 SS 的最短距离是多少？</p><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><ul><li>最大运行时间：1s</li><li>最大运行内存: 128M</li></ul><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><p>用最简单的dfs遍历方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> G[<span class="number">27</span>][<span class="number">27</span>];</span><br><span class="line"><span class="type">int</span> book[<span class="number">27</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> dis=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> MIN=<span class="number">9999999</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">char</span> s1,<span class="type">char</span> s2,<span class="type">int</span> s3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> i=s1-<span class="string">&#x27;A&#x27;</span>+<span class="number">1</span>;</span><br><span class="line">  <span class="type">int</span> j=s2-<span class="string">&#x27;A&#x27;</span>+<span class="number">1</span>;</span><br><span class="line">  G[i][j]=s3;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="built_in">add</span>(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;K&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;N&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;N&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">add</span>(<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这个深度优先遍历只能从A   开始   1  到 S结束 19</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> dis)</span><span class="comment">//深度优先遍历  递归就行 </span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">if</span>(dis&gt;MIN) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">19</span>)<span class="comment">//临界条件 是否到达 S </span></span><br><span class="line">&#123;<span class="keyword">if</span>(dis&lt;MIN)<span class="comment">//到达并且所用的路径小于这个min值 </span></span><br><span class="line">&#123;</span><br><span class="line">MIN=dis;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span>  j=<span class="number">1</span>;j&lt;<span class="number">26</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//判断两个结点之间是否有回路</span></span><br><span class="line"><span class="keyword">if</span>(G[a][j]!=<span class="number">999</span>&amp;&amp;book[j]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">book[j]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(j,dis+G[a][j]);</span><br><span class="line">book[j]=<span class="number">0</span>;<span class="comment">//之前的探索完毕后取消城市j的标记 </span></span><br><span class="line">&#125; </span><br><span class="line">&#125; <span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//这里先把所有路径初始为无穷大</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line">G[i][j]=<span class="number">999</span>;<span class="comment">//999即为无穷大 </span></span><br><span class="line">&#125;</span><br><span class="line">   <span class="built_in">init</span>();<span class="comment">//初始化 </span></span><br><span class="line">    book[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;MIN;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图 </tag>
            
            <tag> 最短路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字串分值</title>
      <link href="/2023/01/15/%E5%AD%97%E4%B8%B2%E5%88%86%E5%80%BC/"/>
      <url>/2023/01/15/%E5%AD%97%E4%B8%B2%E5%88%86%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="子串分值"><a href="#子串分值" class="headerlink" title="子串分值"></a>子串分值</h1><p>(223)</p><p>(4)</p><p><a class="link"   href="https://www.lanqiao.cn/questions/topics/28/" >**<i class="fas fa-external-link-alt"></i></a></p><p>**</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>对于一个字符串 SS，我们定义 SS 的分值 f(S)f(S) 为 SS 中恰好出现一次的字符个数。例如 f(aba) &#x3D; 1，f(abc) &#x3D; 3, f(aaa) &#x3D; 0f(aba)&#x3D;1，f(abc)&#x3D;3,f(aaa)&#x3D;0。</p><p>现在给定一个字符串 S_{0 \cdots n − 1}S0⋯n−1（长度为 nn，1 \leq n \leq 10^51≤n≤105），请你计算对于所有 SS 的非空子串 S_{i \cdots j}(0 ≤ i ≤ j &lt; n)Si⋯j(0≤i≤j&lt;n)，f(S_{i \cdots j})f(Si⋯j) 的和是多少。</p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入一行包含一个由小写字母组成的字符串 SS。</p><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一个整数表示答案。</p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote><p>输入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ababc</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">21</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><ul><li>最大运行时间：1s</li><li>最大运行内存: 256M</li></ul><p>总通过次数: 1164  |  总提交次数: 1693  |  通过率: 68.7%</p><p>难度:   标签: 模拟, 规律, 2020, 省赛</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//这个题目有点类似于隔板问题 计算每个字母的贡献度</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这道题应该不是要我们暴力做出来，主要是要计算每个位置上的字符对S分支的贡献度，以ababc位例，第一个a只有在&quot;a&quot;,&quot;ab&quot;中才是唯一的a,其贡献度为a,而对于最后一个c,其在&quot;ababc&quot;,&quot;babc&quot;,&quot;abc&quot;,&quot;bc&quot;,&quot;c&quot;中都有1点贡献度，于是只要遍历一遍，计算每个字符上的贡献度即可，需要注意这里的每个字符为不同位置上的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">贡献度的计算 一个字符的贡献度便是包含一个此字符的子字符串个数,公式即是（左边的间隔+1）*(右边的间隔+1)*/</span> </span><br><span class="line">string s1;</span><br><span class="line">cin&gt;&gt;s1;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> left_jiange=<span class="number">1</span>,right_jiange=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s1.<span class="built_in">length</span>();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> s2=s1[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l=i<span class="number">-1</span>;l&gt;=<span class="number">0</span>;l--)<span class="comment">//每次向左边查找，每向左移动一次 左间隔加一 </span></span><br><span class="line">&#123; <span class="keyword">if</span>(l&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span>(s1[l]==s2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; </span><br><span class="line">left_jiange++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> r=i+<span class="number">1</span>;r&lt;s1.<span class="built_in">length</span>();r++)</span><br><span class="line">&#123;</span><br><span class="line">      <span class="keyword">if</span>(r&gt;=s1.<span class="built_in">length</span>())</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="keyword">if</span>(s1[r]==s2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">right_jiange++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum+=left_jiange*right_jiange;</span><br><span class="line">left_jiange=<span class="number">1</span>;</span><br><span class="line">right_jiange=<span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特别数的和</title>
      <link href="/2023/01/15/%E7%89%B9%E5%88%AB%E6%95%B0%E7%9A%84%E5%92%8C/"/>
      <url>/2023/01/15/%E7%89%B9%E5%88%AB%E6%95%B0%E7%9A%84%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="特别数的和"><a href="#特别数的和" class="headerlink" title="特别数的和"></a>特别数的和</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>小明对数位中含有 2、0、1、9 的数字很感兴趣（不包括前导 0），在 1 到 40 中这样的数包括 1、2、9、10 至 32、39 和 40，共 28 个，他们的和是 574。</p><p>请问，在 1 到 nn 中，所有这样的数的和是多少？</p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入格式：</p><p>输入一行包含两个整数 n（1 \leq n \leq 10^4）n（1≤n≤104）。</p><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一行，包含一个整数，表示满足条件的数的和。</p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote><p>输入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">40</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">574</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><ul><li>最大运行时间：1s</li><li>最大运行内存: 256M</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">sum</span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,n+<span class="number">1</span>):</span><br><span class="line">    m=<span class="built_in">str</span>(i)</span><br><span class="line">    <span class="keyword">if</span>((<span class="string">&#x27;2&#x27;</span> <span class="keyword">in</span> m )<span class="keyword">or</span> ( <span class="string">&#x27;0&#x27;</span> <span class="keyword">in</span> m) <span class="keyword">or</span>(<span class="string">&#x27;1&#x27;</span> <span class="keyword">in</span> m) <span class="keyword">or</span>(<span class="string">&#x27;9&#x27;</span> <span class="keyword">in</span> m)):</span><br><span class="line">        <span class="built_in">sum</span>+=i</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//特别数的和</span></span><br><span class="line"><span class="comment">//用c++做也行 就是转换成字符型 用string库里的find函数看看能不能找到</span></span><br><span class="line"><span class="comment">//众所周知find函数要是有这个字符返回这个位置的迭代器 否则返回最后末位置</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">string s1=<span class="built_in">to_string</span>(i);</span><br><span class="line"><span class="keyword">if</span>(s1.<span class="built_in">find</span>(<span class="string">&#x27;2&#x27;</span>)&lt;s1.<span class="built_in">length</span>()||s1.<span class="built_in">find</span>(<span class="string">&#x27;0&#x27;</span>)&lt;s1.<span class="built_in">length</span>()||s1.<span class="built_in">find</span>(<span class="string">&#x27;1&#x27;</span>)&lt;s1.<span class="built_in">length</span>()||s1.<span class="built_in">find</span>(<span class="string">&#x27;9&#x27;</span>)&lt;s1.<span class="built_in">length</span>())</span><br><span class="line">sum+=i;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;sum;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数学三角形</title>
      <link href="/2023/01/15/%E6%95%B0%E5%AD%A6%E4%B8%89%E8%A7%92%E5%BD%A2/"/>
      <url>/2023/01/15/%E6%95%B0%E5%AD%A6%E4%B8%89%E8%A7%92%E5%BD%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="数字三角形"><a href="#数字三角形" class="headerlink" title="数字三角形"></a>数字三角形</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="https://doc.shiyanlou.com/courses/uid1580206-20210224-1614154063705" alt="图片描述"></p><p>上图给出了一个数字三角形。从三角形的顶部到底部有很多条不同的路径。对于每条路径，把路径上面的数加起来可以得到一个和，你的任务就是找到最大的和。</p><p>路径上的每一步只能从一个数走到下一层和它最近的左边的那个数或者右 边的那个数。此外，向左下走的次数与向右下走的次数相差不能超过 1。</p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入的第一行包含一个整数 N\ (1 \leq N \leq 100)N (1≤N≤100)，表示三角形的行数。</p><p>下面的 NN 行给出数字三角形。数字三角形上的数都是 0 至 100 之间的整数。</p><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一个整数，表示答案。</p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote><p>输入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">7</span><br><span class="line">3 8</span><br><span class="line">8 1 0</span><br><span class="line">2 7 4 4</span><br><span class="line">4 5 2 6 5</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">27</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><ul><li>最大运行时间：1s</li><li>最大运行内存: 256M</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">/*思路：1.把输入的数字存为数组；</span></span><br><span class="line"><span class="comment">2.从第二行开始计算相加和；</span></span><br><span class="line"><span class="comment">3.如果是每一行的第一个数，则与上一行第一个数取和；</span></span><br><span class="line"><span class="comment">4.如果是每一行的最后一个数，则与上一行的最后一个数取和；</span></span><br><span class="line"><span class="comment">5.如果不是上面的情况，则与上一行对应的两个数中最大的取和；</span></span><br><span class="line"><span class="comment">6.由于要求向左向右的次数相差不超过1，</span></span><br><span class="line"><span class="comment">所以只有最后一行的中间的一个或者两个数字符合要求，所以输出中间最大的数。*/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 请在此输入您的代码</span></span><br><span class="line">  <span class="type">int</span> n;<span class="comment">//三角形的层数</span></span><br><span class="line">  cin&gt;&gt;n;</span><br><span class="line">  </span><br><span class="line">  vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;<span class="built_in">shuzu</span>(n);</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="comment">//初始化三角形</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=i;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">int</span> x;</span><br><span class="line">      cin&gt;&gt;x;</span><br><span class="line"></span><br><span class="line">      shuzu[i].<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp=shuzu;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="comment">//遍历初始化dp数组 </span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;<span class="keyword">continue</span>;&#125;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=i;j++)</span><br><span class="line">      &#123;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span>(j==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">dp[i][j]+=dp[i<span class="number">-1</span>][j];<span class="comment">//2.如果是每一行的第一个数，则与上一行第一个数取和；4.如果是每一行的最后一个数，则与上一行的最后一个数取和；</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(j==i)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j]+=dp[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果不是上面的情况，则与上一行对应的两个数中最大的取和；</span></span><br><span class="line">dp[i][j]+=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j],dp[i<span class="number">-1</span>][j<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>)</span><br><span class="line">  cout&lt;&lt;dp[n<span class="number">-1</span>][n/<span class="number">2</span>]&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  cout&lt;&lt;<span class="built_in">max</span>(dp[n<span class="number">-1</span>][n/<span class="number">2</span>],dp[n<span class="number">-1</span>][n/<span class="number">2</span><span class="number">-1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数列求和</title>
      <link href="/2023/01/15/%E6%95%B0%E5%88%97%E6%B1%82%E5%92%8C/"/>
      <url>/2023/01/15/%E6%95%B0%E5%88%97%E6%B1%82%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="数列求值"><a href="#数列求值" class="headerlink" title="数列求值"></a>数列求值</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><strong>本题为填空题，只需要算出结果后，在代码中使用输出语句将所填结果输出即可。</strong></p><p>给定数列 1, 1, 1, 3, 5, 9, 17, \cdots1,1,1,3,5,9,17,⋯，从第 44 项开始，每项都是前 33 项的和。</p><p>求第 2019032420190324 项的最后 44 位数字。</p><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><ul><li>最大运行时间：1s</li><li>最大运行内存: 128M</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 10000 </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max 20190324</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 感觉有点像dp</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> a=<span class="number">1</span>,b=<span class="number">1</span>,c=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">4</span>;i&lt;=max;i++)</span><br><span class="line">  &#123;sum=(a+b+c)%mod;</span><br><span class="line">  a=b;</span><br><span class="line">  b=c;</span><br><span class="line">  c=sum;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;第&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;个数字是&quot;</span>&lt;&lt;sum&lt;&lt;endl; </span><br><span class="line">  </span><br><span class="line">  &#125; </span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>棋盘放麦子</title>
      <link href="/2023/01/15/%E6%A3%8B%E7%9B%98%E6%94%BE%E9%BA%A6%E5%AD%90/"/>
      <url>/2023/01/15/%E6%A3%8B%E7%9B%98%E6%94%BE%E9%BA%A6%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h1 id="棋盘放麦子"><a href="#棋盘放麦子" class="headerlink" title="棋盘放麦子"></a>棋盘放麦子</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><strong>本题为填空题，只需要算出结果后，在代码中使用输出语句将所填结果输出即可。</strong></p><p>你一定听说过这个故事。国王对发明国际象棋的大臣很佩服，问他要什么报酬，大臣说：请在第 11 个棋盘格放 11 粒麦子，在第 22 个棋盘格放 22 粒麦子，在第 33 个棋盘格放 44 粒麦子，在第 44 个棋盘格放 88 粒麦子，……后一格的数字是前一格的两倍，直到放完所有棋盘格（国际象棋共有 6464 格）。</p><p>国王以为他只是想要一袋麦子而已，哈哈大笑。</p><p>当时的条件下无法准确计算，但估算结果令人吃惊：即使全世界都铺满麦子也不够用！</p><p>请你借助计算机准确地计算，到底需要多少粒麦子。</p><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><ul><li>最大运行时间：1s</li><li>最大运行内存: 128M</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> s1=<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">64</span>)<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"> cout&lt;&lt;s1;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 超大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>年号字串</title>
      <link href="/2023/01/15/%E5%B9%B4%E5%8F%B7%E5%AD%97%E4%B8%B2/"/>
      <url>/2023/01/15/%E5%B9%B4%E5%8F%B7%E5%AD%97%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="年号字串"><a href="#年号字串" class="headerlink" title="年号字串"></a>年号字串</h1><p>(257)</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><strong>本题为填空题，只需要算出结果后，在代码中使用输出语句将所填结果输出即可。</strong></p><p>小明用字母 A 对应数字 1，B 对应 2，以此类推，用 Z 对应 26。对于 27 以上的数字，小明用两位或更长位的字符串来对应，例如 AA 对应 27，AB 对应28，AZ 对应 52，LQ 对应 329。</p><p>请问 2019 对应的字符串是什么？</p><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><ul><li>最大运行时间：1s</li><li>最大运行内存: 128M</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//年号子串实质上就是所谓的26进制转化</span></span><br><span class="line"><span class="type">int</span> n=<span class="number">2019</span>;</span><br><span class="line"><span class="comment">//cin&gt;&gt;n;</span></span><br><span class="line">string s1=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">char</span> m=<span class="string">&#x27;A&#x27;</span>;<span class="comment">//A的阿斯克码是65</span></span><br><span class="line"><span class="type">char</span> A[<span class="number">27</span>]=&#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">26</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">A[i]=i+<span class="number">64</span>;<span class="comment">//这样第一个位置为其他位置为 </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//int p1=m;</span></span><br><span class="line"><span class="comment">//cout&lt;&lt; p1;</span></span><br><span class="line"><span class="comment">/*for(const auto &amp;s2:A)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout&lt;&lt;s2&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(n!=<span class="number">0</span>)</span><br><span class="line">&#123;s1+=A[n%<span class="number">26</span>];</span><br><span class="line">n/=<span class="number">26</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">reverse</span>(s1.<span class="built_in">begin</span>(),s1.<span class="built_in">end</span>());</span><br><span class="line">cout&lt;&lt;s1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 日期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回文日期</title>
      <link href="/2023/01/15/%E5%9B%9E%E6%96%87%E6%97%A5%E6%9C%9F/"/>
      <url>/2023/01/15/%E5%9B%9E%E6%96%87%E6%97%A5%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="回文日期-对不对不知道，主要是那个oj太拉胯"><a href="#回文日期-对不对不知道，主要是那个oj太拉胯" class="headerlink" title="回文日期(对不对不知道，主要是那个oj太拉胯)"></a>回文日期(对不对不知道，主要是那个oj太拉胯)</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>2020 年春节期间，有一个特殊的日期引起了大家的注意：2020 年 2 月 2 日。因为如果将这个日期按 “yyyymmdd” 的格式写成一个 8 位数是 20200202，恰好是一个回文数。我们称这样的日期是回文日期。</p><p>有人表示 20200202 是 “千年一遇” 的特殊日子。对此小明很不认同，因为不到 2 年之后就是下一个回文日期：20211202 即 2021 年 12 月 2 日。</p><p>也有人表示 20200202 并不仅仅是一个回文日期，还是一个 ABABBABA 型的回文日期。对此小明也不认同，因为大约 100 年后就能遇到下一个 ABABBABA 型的回文日期：21211212 即 2121 年 12 月 12 日。算不上 “千年一遇”，顶多算 “千年两遇”。</p><p>给定一个 8 位数的日期，请你计算该日期之后下一个回文日期和下一个 ABABBABA 型的回文日期各是哪一天。</p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入包含一个八位整数 NN，表示日期。</p><p>对于所有评测用例，10000101 \leq N \leq 8999123110000101≤N≤89991231，保证 NN 是一个合法日期的 8 位数表示。</p><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出两行，每行 1 个八位数。第一行表示下一个回文日期，第二行表示下一个 ABABBABA 型的回文日期。</p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote><p>输入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">20200202</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">20211202</span><br><span class="line">21211212</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><ul><li>最大运行时间：1s</li><li>最大运行内存: 256M</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">  <span class="type">int</span> hash1[<span class="number">13</span>]=&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;; <span class="comment">//闰年 </span></span><br><span class="line">    <span class="type">int</span> hash2[<span class="number">13</span>]=&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">huiwen</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string s2 = <span class="built_in">to_string</span>(a);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=s2.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line">s2+=s2[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> shuzi=<span class="built_in">atoi</span>(s2.<span class="built_in">c_str</span>());</span><br><span class="line"><span class="keyword">return</span> shuzi;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">huiwen2</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> a=a*<span class="number">100</span>+a;</span><br><span class="line"> <span class="keyword">return</span>  <span class="built_in">huiwen</span>(a) ;</span><br><span class="line"> &#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="comment">//取前四位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=n/<span class="number">10000</span>+<span class="number">1</span>;;i++)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="type">int</span> answer=<span class="built_in">huiwen</span>(i);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(i/<span class="number">4</span>==<span class="number">0</span>&amp;&amp;i%<span class="number">100</span>!=<span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">  <span class="type">int</span> month=(answer%<span class="number">10000</span>)/<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">if</span>(month&lt;=<span class="number">12</span>)</span><br><span class="line">      &#123;<span class="keyword">if</span>((answer%<span class="number">1000000</span>)/<span class="number">10000</span>&lt;=hash1[month])</span><br><span class="line">      &#123;</span><br><span class="line">      cout&lt;&lt;answer&lt;&lt;endl;<span class="keyword">break</span>;</span><br><span class="line">     </span><br><span class="line">      &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="type">int</span> month=(answer%<span class="number">10000</span>)/<span class="number">100</span>;</span><br><span class="line">  <span class="keyword">if</span>(month&lt;=<span class="number">12</span>)</span><br><span class="line">    &#123;<span class="keyword">if</span>((answer%<span class="number">1000000</span>)/<span class="number">10000</span>&lt;=hash2[month])</span><br><span class="line">    &#123;</span><br><span class="line">    cout&lt;&lt;answer&lt;&lt;endl;<span class="keyword">break</span>;</span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    &#125;<span class="comment">//至此第一个回文数字结束</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=n/<span class="number">1000000</span>+<span class="number">1</span>;;i++)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="type">int</span> answer2=<span class="built_in">huiwen2</span>(i);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> answeryear=answer2/<span class="number">10000</span>;</span><br><span class="line">      <span class="keyword">if</span>(answeryear/<span class="number">4</span>==<span class="number">0</span>&amp;&amp;answeryear%<span class="number">100</span>!=<span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">  <span class="type">int</span> month=(answer2%<span class="number">10000</span>)/<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">if</span>(month&lt;=<span class="number">12</span>)</span><br><span class="line">      &#123;<span class="keyword">if</span>((answer2%<span class="number">1000000</span>)/<span class="number">10000</span>&lt;=hash1[month])</span><br><span class="line">      &#123;</span><br><span class="line">      cout&lt;&lt;answer2&lt;&lt;endl;<span class="keyword">break</span>;</span><br><span class="line">     </span><br><span class="line">      &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="type">int</span> month=(answer2%<span class="number">10000</span>)/<span class="number">100</span>;</span><br><span class="line">  <span class="keyword">if</span>(month&lt;=<span class="number">12</span>)</span><br><span class="line">    &#123;<span class="keyword">if</span>((answer2%<span class="number">1000000</span>)/<span class="number">10000</span>&lt;=hash2[month])</span><br><span class="line">    &#123;</span><br><span class="line">    cout&lt;&lt;answer2&lt;&lt;endl;<span class="keyword">break</span>;</span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    &#125;<span class="comment">//第二个回文数字结束 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 日期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>格子刷油漆</title>
      <link href="/2023/01/15/%E6%A0%BC%E5%AD%90%E5%88%B7%E6%B2%B9%E6%BC%86/"/>
      <url>/2023/01/15/%E6%A0%BC%E5%AD%90%E5%88%B7%E6%B2%B9%E6%BC%86/</url>
      
        <content type="html"><![CDATA[<h1 id="格子刷油漆"><a href="#格子刷油漆" class="headerlink" title="格子刷油漆"></a>格子刷油漆</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>X 国的一段古城墙的顶端可以看成 2\times N2×N 个格子组成的矩形（如下图所示），现需要把这些格子刷上保护漆。</p><p><img src="https://doc.shiyanlou.com/courses/uid1580206-20210202-1612251487413" alt="img"></p><p>你可以从任意一个格子刷起，刷完一格，可以移动到和它相邻的格子（对角相邻也算数），但不能移动到较远的格子（因为油漆未干不能踩！）</p><p>比如：a d b c e f 就是合格的刷漆顺序。c e f d a b 是另一种合适的方案。</p><p>当已知 NN 时，求总的方案数。当 NN 较大时，结果会迅速增大，请把结果对 10^9+7109+7 取模。</p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入数据为一个正整数（不大于 1000）。</p><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出数据为一个正整数。</p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote><p>输入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">24</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><ul><li>最大运行时间：1s</li><li>最大运行内存: 256M</li></ul><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p><img src="C:/Users/%E6%9D%8E%E5%BB%BA%E4%B8%9A/AppData/Roaming/Tencent/Users/2548154814/QQ/WinTemp/RichOle/_%7D9QTEBYV4$A(LC61RCBJ)T.png" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[<span class="number">100000</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> b[<span class="number">100000</span>];</span><br><span class="line">a[<span class="number">1</span>]=<span class="number">1</span>;a[<span class="number">2</span>]=<span class="number">6</span>;b[<span class="number">1</span>]=<span class="number">1</span>;b[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> N;cin&gt;&gt;N; </span><br><span class="line"><span class="keyword">if</span>(N==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(N==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;24&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=N;i++)</span><br><span class="line">&#123;  b[i]=<span class="number">2</span>*b[i<span class="number">-1</span>];<span class="comment">//初始化b </span></span><br><span class="line">a[i]=<span class="number">4</span>*a[i<span class="number">-2</span>]+<span class="number">2</span>*a[i<span class="number">-1</span>]+b[i];<span class="comment">//初始化a </span></span><br><span class="line">b[i]%=mod;</span><br><span class="line">a[i]%=mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum1=<span class="number">0</span>;</span><br><span class="line">sum1=<span class="number">4</span>*a[N]%mod;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=N<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"> sum2+=<span class="number">2</span>*(b[N-i+<span class="number">1</span>]*<span class="number">2</span>*a[i<span class="number">-1</span>]%mod+b[i]*<span class="number">2</span>*a[N-i]%mod) ;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;(sum1+sum2)%mod&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 日期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/2023/01/15/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2023/01/15/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h3 id="动态规划-1"><a href="#动态规划-1" class="headerlink" title="动态规划"></a><strong>动态规划</strong></h3><p>（英语：Dynamic programming，简称 DP）是一种在数学、管理科学、计算机科学、经济学和生物信息学中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。</p><p>动态规划不是某一种具体的算法，而是一种算法思想：若要解一个给定问题，我们需要解其不同部分（即子问题），再根据子问题的解以得出原问题的解。</p><p>应用这种算法思想解决问题的可行性，对子问题与原问题的关系，以及子问题之间的关系这两方面有一些要求，它们分别对应了最优子结构和重复子问题。</p><h3 id="最优子结构"><a href="#最优子结构" class="headerlink" title="最优子结构"></a>最优子结构</h3><p>最优子结构规定的是子问题与原问题的关系</p><p>动态规划要解决的都是一些问题的最优解，即从很多解决问题的方案中找到最优的一个。当我们在求一个问题最优解的时候，如果可以把这个问题分解成多个子问题，然后递归地找到每个子问题的最优解，最后通过一定的数学方法对各个子问题的最优解进行组合得出最终的结果。总结来说就是一个问题的最优解是由它的各个子问题的最优解决定的。</p><p>将子问题的解进行组合可以得到原问题的解是动态规划可行性的关键。在解题中一般用状态转移方程描述这种组合。例如原问题的解为 f(n)f(n)，其中 f(n)f(n) 也叫状态。状态转移方程</p><p>$$<br>f(n) &#x3D; f(n - 1) + f(n - 2)f(n)&#x3D;f(n−1)+f(n−2)<br>$$<br>描述了一种原问题与子问题的组合关系 。在原问题上有一些选择，不同选择可能对应不同的子问题或者不同的组合方式。例如</p><p><img src="C:/Users/%E6%9D%8E%E5%BB%BA%E4%B8%9A/Desktop/QQ%E5%9B%BE%E7%89%8720220202172121.png" alt="QQ图片20220202172121"></p><p>n&#x3D;2k 和 n &#x3D; 2k + 1n&#x3D;2k+1 对应了原问题 n 上不同的选择，分别对应了不同的子问题和组合方式。</p><p>找到了最优子结构，也就能推导出一个状态转移方程 f(n)f(n)，通过这个状态转移方程，我们能很快的写出问题的递归实现方法。</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/06/1-1.png" alt="img"></p><h3 id="重复子问题"><a href="#重复子问题" class="headerlink" title="重复子问题"></a>重复子问题</h3><p>重复子问题规定的是子问题与子问题的关系。</p><p>当我们在递归地寻找每个子问题的最优解的时候，有可能会重复地遇到一些更小的子问题，而且这些子问题会重叠地出现在子问题里，出现这样的情况，会有很多重复的计算，动态规划可以保证每个重叠的子问题只会被求解一次。当重复的问题很多的时候，动态规划可以减少很多重复的计算。</p><p>重复子问题不是保证解的正确性必须的，但是如果递归求解子问题时，没有出现重复子问题，则没有必要用动态规划，直接普通的递归就可以了。</p><p>例如，斐波那契问题的状态转移方程</p><p> <strong>f(n) &#x3D; f(n - 1) + f(n - 2)f(n)&#x3D;f(n−1)+f(n−2)。</strong></p><p>在求 f(5)f(5) 时，需要先求子问题 f(4)f(4) 和 f(3)f(3)，得到结果后再组合成原问题 f(5)f(5) 的解。递归地求 f(4)f(4) 时，又要先求子问题 f(3)f(3) 和 f(2)f(2) ，这里的 f(3)f(3) 与求 f(5)f(5) 时的子问题重复了。</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/09/1-2.png" alt="img"></p><p>解决动态规划问题的核心：找出子问题及其子问题与原问题的关系</p><p>找到了子问题以及子问题与原问题的关系，就可以递归地求解子问题了。但重叠的子问题使得直接递归会有很多重复计算，于是就想到记忆化递归法：若能事先确定子问题的范围就可以建表存储子问题的答案。</p><p>动态规划算法中关于最优子结构和重复子问题的理解的<strong>关键点</strong>：</p><p>1.证明问题的方案中包含一种选择，选择之后留下一个或多个子问题<br>2.设计子问题的递归描述方式<br>3.证明对原问题的最优解包括了对所有子问题的最优解<br>4.证明子问题是重叠的（这一步不是动态规划正确性必需的，但是如果子问题无重叠，则效率与一般递归是相同的）</p><h3 id="动态规划与其它算法的关系"><a href="#动态规划与其它算法的关系" class="headerlink" title="动态规划与其它算法的关系"></a>动态规划与其它算法的关系</h3><p>这一章我们将会介绍分治和贪心算法的核心思想，并与动态规划算法进行比较。</p><h4 id="分治"><a href="#分治" class="headerlink" title="分治"></a>分治</h4><p>解决分治问题的时候，思路就是想办法把问题的规模减小，有时候减小一个，有时候减小一半，然后将每个小问题的解以及当前的情况组合起来得出最终的结果。例如归并排序和快速排序，归并排序将要排序的数组平均地分成两半，快速排序将数组随机地分成两半。然后不断地对它们递归地进行处理。</p><p>这里存在有最优的子结构，即原数组的排序结果是在子数组排序的结果上组合出来的，但是不存在重复子问题，因为不断地对待排序的数组进行对半分的时候，两半边的数据并不重叠，分别解决左半边和右半边的两个子问题的时候，没有子问题重复出现，这是动态规划和分治的区别。</p><h4 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h4><p>关于最优子结构</p><p>贪心：每一步的最优解一定包含上一步的最优解，上一步之前的最优解无需记录<br>动态规划：全局最优解中一定包含某个局部最优解，但不一定包含上一步的局部最优解，因此需要记录之前的所有的局部最优解<br>关于子问题最优解组合成原问题最优解的组合方式</p><p>贪心：如果把所有的子问题看成一棵树的话，贪心从根出发，每次向下遍历最优子树即可，这里的最优是贪心意义上的最优。此时不需要知道一个节点的所有子树情况，于是构不成一棵完整的树<br>动态规划：动态规划需要对每一个子树求最优解，直至下面的每一个叶子的值，最后得到一棵完整的树，在所有子树都得到最优解后，将他们组合成答案<br>结果正确性</p><p><img src="C:/Users/%E6%9D%8E%E5%BB%BA%E4%B8%9A/AppData/Roaming/Tencent/Users/2548154814/QQ/WinTemp/RichOle/06J79F%5DO3J68(X1Z)0M@PPT.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递增数列</title>
      <link href="/2023/01/15/%E9%80%92%E5%A2%9E%E6%95%B0%E5%88%97/"/>
      <url>/2023/01/15/%E9%80%92%E5%A2%9E%E6%95%B0%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h3 id="递增序列"><a href="#递增序列" class="headerlink" title="递增序列"></a>递增序列</h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><strong>本题为填空题，只需要算出结果后，在代码中使用输出语句将所填结果输出即可。</strong></p><p>对于一个字母矩阵，我们称矩阵中的一个递增序列是指在矩阵中找到两个字母，它们在同一行，同一列，或者在同一 4545 度的斜线上，这两个字母从左向右看、或者从上向下看是递增的。</p><p>例如，如下矩阵中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LANN</span><br><span class="line">QIAO</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有LN、LN、AN、AN、IO、AO、LQ、AI、NO、NO、AQ、IN、ANLN、LN、AN、AN、IO、AO、LQ、AI、NO、NO、AQ、IN、AN 等 1313 个 递增序列。注意当两个字母是从左下到右上排列时，从左向右看和从上向下看 是不同的顺序。</p><p>对于下面的 3030 行 5050 列的矩阵，请问总共有多少个递增序列？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">VLPWJVVNNZSWFGHSFRBCOIJTPYNEURPIGKQGPSXUGNELGRVZAG</span><br><span class="line">SDLLOVGRTWEYZKKXNKIRWGZWXWRHKXFASATDWZAPZRNHTNNGQF</span><br><span class="line">ZGUGXVQDQAEAHOQEADMWWXFBXECKAVIGPTKTTQFWSWPKRPSMGA</span><br><span class="line">BDGMGYHAOPPRRHKYZCMFZEDELCALTBSWNTAODXYVHQNDASUFRL</span><br><span class="line">YVYWQZUTEPFSFXLTZBMBQETXGXFUEBHGMJKBPNIHMYOELYZIKH</span><br><span class="line">ZYZHSLTCGNANNXTUJGBYKUOJMGOGRDPKEUGVHNZJZHDUNRERBU</span><br><span class="line">XFPTZKTPVQPJEMBHNTUBSMIYEGXNWQSBZMHMDRZZMJPZQTCWLR</span><br><span class="line">ZNXOKBITTPSHEXWHZXFLWEMPZTBVNKNYSHCIQRIKQHFRAYWOPG</span><br><span class="line">MHJKFYYBQSDPOVJICWWGGCOZSBGLSOXOFDAADZYEOBKDDTMQPA</span><br><span class="line">VIDPIGELBYMEVQLASLQRUKMXSEWGHRSFVXOMHSJWWXHIBCGVIF</span><br><span class="line">GWRFRFLHAMYWYZOIQODBIHHRIIMWJWJGYPFAHZZWJKRGOISUJC</span><br><span class="line">EKQKKPNEYCBWOQHTYFHHQZRLFNDOVXTWASSQWXKBIVTKTUIASK</span><br><span class="line">PEKNJFIVBKOZUEPPHIWLUBFUDWPIDRJKAZVJKPBRHCRMGNMFWW</span><br><span class="line">CGZAXHXPDELTACGUWBXWNNZNDQYYCIQRJCULIEBQBLLMJEUSZP</span><br><span class="line">RWHHQMBIJWTQPUFNAESPZHAQARNIDUCRYQAZMNVRVZUJOZUDGS</span><br><span class="line">PFGAYBDEECHUXFUZIKAXYDFWJNSAOPJYWUIEJSCORRBVQHCHMR</span><br><span class="line">JNVIPVEMQSHCCAXMWEFSYIGFPIXNIDXOTXTNBCHSHUZGKXFECL</span><br><span class="line">YZBAIIOTWLREPZISBGJLQDALKZUKEQMKLDIPXJEPENEIPWFDLP</span><br><span class="line">HBQKWJFLSEXVILKYPNSWUZLDCRTAYUUPEITQJEITZRQMMAQNLN</span><br><span class="line">DQDJGOWMBFKAIGWEAJOISPFPLULIWVVALLIIHBGEZLGRHRCKGF</span><br><span class="line">LXYPCVPNUKSWCCGXEYTEBAWRLWDWNHHNNNWQNIIBUCGUJYMRYW</span><br><span class="line">CZDKISKUSBPFHVGSAVJBDMNPSDKFRXVVPLVAQUGVUJEXSZFGFQ</span><br><span class="line">IYIJGISUANRAXTGQLAVFMQTICKQAHLEBGHAVOVVPEXIMLFWIYI</span><br><span class="line">ZIIFSOPCMAWCBPKWZBUQPQLGSNIBFADUUJJHPAIUVVNWNWKDZB</span><br><span class="line">HGTEEIISFGIUEUOWXVTPJDVACYQYFQUCXOXOSSMXLZDQESHXKP</span><br><span class="line">FEBZHJAGIFGXSMRDKGONGELOALLSYDVILRWAPXXBPOOSWZNEAS</span><br><span class="line">VJGMAOFLGYIFLJTEKDNIWHJAABCASFMAKIENSYIZZSLRSUIPCJ</span><br><span class="line">BMQGMPDRCPGWKTPLOTAINXZAAJWCPUJHPOUYWNWHZAKCDMZDSR</span><br><span class="line">RRARTVHZYYCEDXJQNQAINQVDJCZCZLCQWQQIKUYMYMOVMNCBVY</span><br><span class="line">ABTCRRUXVGYLZILFLOFYVWFFBZNFWDZOADRDCLIRFKBFBHMAXX</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><ul><li>最大运行时间：1s</li><li>最大运行内存: 128M</li></ul><h2 id="代-码："><a href="#代-码：" class="headerlink" title="代 码："></a>代 码：</h2><p>一个简单的模拟题 注意一下题目 左下到右上的顺序不一样  所以只要不等于就可以了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">VLPWJVVNNZSWFGHSFRBCOIJTPYNEURPIGKQGPSXUGNELGRVZAG</span></span><br><span class="line"><span class="comment">SDLLOVGRTWEYZKKXNKIRWGZWXWRHKXFASATDWZAPZRNHTNNGQF</span></span><br><span class="line"><span class="comment">ZGUGXVQDQAEAHOQEADMWWXFBXECKAVIGPTKTTQFWSWPKRPSMGA</span></span><br><span class="line"><span class="comment">BDGMGYHAOPPRRHKYZCMFZEDELCALTBSWNTAODXYVHQNDASUFRL</span></span><br><span class="line"><span class="comment">YVYWQZUTEPFSFXLTZBMBQETXGXFUEBHGMJKBPNIHMYOELYZIKH</span></span><br><span class="line"><span class="comment">ZYZHSLTCGNANNXTUJGBYKUOJMGOGRDPKEUGVHNZJZHDUNRERBU</span></span><br><span class="line"><span class="comment">XFPTZKTPVQPJEMBHNTUBSMIYEGXNWQSBZMHMDRZZMJPZQTCWLR</span></span><br><span class="line"><span class="comment">ZNXOKBITTPSHEXWHZXFLWEMPZTBVNKNYSHCIQRIKQHFRAYWOPG</span></span><br><span class="line"><span class="comment">MHJKFYYBQSDPOVJICWWGGCOZSBGLSOXOFDAADZYEOBKDDTMQPA</span></span><br><span class="line"><span class="comment">VIDPIGELBYMEVQLASLQRUKMXSEWGHRSFVXOMHSJWWXHIBCGVIF</span></span><br><span class="line"><span class="comment">GWRFRFLHAMYWYZOIQODBIHHRIIMWJWJGYPFAHZZWJKRGOISUJC</span></span><br><span class="line"><span class="comment">EKQKKPNEYCBWOQHTYFHHQZRLFNDOVXTWASSQWXKBIVTKTUIASK</span></span><br><span class="line"><span class="comment">PEKNJFIVBKOZUEPPHIWLUBFUDWPIDRJKAZVJKPBRHCRMGNMFWW</span></span><br><span class="line"><span class="comment">CGZAXHXPDELTACGUWBXWNNZNDQYYCIQRJCULIEBQBLLMJEUSZP</span></span><br><span class="line"><span class="comment">RWHHQMBIJWTQPUFNAESPZHAQARNIDUCRYQAZMNVRVZUJOZUDGS</span></span><br><span class="line"><span class="comment">PFGAYBDEECHUXFUZIKAXYDFWJNSAOPJYWUIEJSCORRBVQHCHMR</span></span><br><span class="line"><span class="comment">JNVIPVEMQSHCCAXMWEFSYIGFPIXNIDXOTXTNBCHSHUZGKXFECL</span></span><br><span class="line"><span class="comment">YZBAIIOTWLREPZISBGJLQDALKZUKEQMKLDIPXJEPENEIPWFDLP</span></span><br><span class="line"><span class="comment">HBQKWJFLSEXVILKYPNSWUZLDCRTAYUUPEITQJEITZRQMMAQNLN</span></span><br><span class="line"><span class="comment">DQDJGOWMBFKAIGWEAJOISPFPLULIWVVALLIIHBGEZLGRHRCKGF</span></span><br><span class="line"><span class="comment">LXYPCVPNUKSWCCGXEYTEBAWRLWDWNHHNNNWQNIIBUCGUJYMRYW</span></span><br><span class="line"><span class="comment">CZDKISKUSBPFHVGSAVJBDMNPSDKFRXVVPLVAQUGVUJEXSZFGFQ</span></span><br><span class="line"><span class="comment">IYIJGISUANRAXTGQLAVFMQTICKQAHLEBGHAVOVVPEXIMLFWIYI</span></span><br><span class="line"><span class="comment">ZIIFSOPCMAWCBPKWZBUQPQLGSNIBFADUUJJHPAIUVVNWNWKDZB</span></span><br><span class="line"><span class="comment">HGTEEIISFGIUEUOWXVTPJDVACYQYFQUCXOXOSSMXLZDQESHXKP</span></span><br><span class="line"><span class="comment">FEBZHJAGIFGXSMRDKGONGELOALLSYDVILRWAPXXBPOOSWZNEAS</span></span><br><span class="line"><span class="comment">VJGMAOFLGYIFLJTEKDNIWHJAABCASFMAKIENSYIZZSLRSUIPCJ</span></span><br><span class="line"><span class="comment">BMQGMPDRCPGWKTPLOTAINXZAAJWCPUJHPOUYWNWHZAKCDMZDSR</span></span><br><span class="line"><span class="comment">RRARTVHZYYCEDXJQNQAINQVDJCZCZLCQWQQIKUYMYMOVMNCBVY</span></span><br><span class="line"><span class="comment">ABTCRRUXVGYLZILFLOFYVWFFBZNFWDZOADRDCLIRFKBFBHMAXX</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> shuzu[<span class="number">30</span>][<span class="number">50</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">30</span>;i++)<span class="comment">//初始化矩阵 </span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">50</span>;j++)</span><br><span class="line">  &#123;<span class="type">char</span> s1;</span><br><span class="line">  cin&gt;&gt;s1;</span><br><span class="line">  <span class="type">int</span> a=s1;</span><br><span class="line">  shuzu[i][j]=a;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">   <span class="comment">/*输出矩阵 </span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;30;i++)//初始化矩阵 </span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">    for(int j=0;j&lt;50;j++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">    cout&lt;&lt;shuzu[i][j]&lt;&lt; &#x27; &#x27;;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  cout&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">  <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">   <span class="type">int</span> m;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">30</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">50</span>;j++)</span><br><span class="line">  &#123; m=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j+m&lt;<span class="number">50</span>)</span><br><span class="line">&#123;<span class="comment">//同一行的比较 </span></span><br><span class="line"><span class="keyword">if</span>(shuzu[i][j]&lt;shuzu[i][j+m])&#123;sum++;&#125; </span><br><span class="line">m++;</span><br><span class="line">&#125;</span><br><span class="line"> m=<span class="number">1</span>;<span class="comment">//同一列比较 </span></span><br><span class="line"><span class="keyword">while</span>(i+m&lt;<span class="number">30</span>)</span><br><span class="line">&#123;<span class="keyword">if</span>(shuzu[i][j]&lt;shuzu[i+m][j])</span><br><span class="line">&#123;sum++;&#125;</span><br><span class="line">m++;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> m=<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">while</span>(m+i&lt;<span class="number">30</span>&amp;&amp;m+j&lt;<span class="number">50</span>)<span class="comment">//左上到右下 </span></span><br><span class="line"> &#123;<span class="keyword">if</span>(shuzu[i][j]&lt;shuzu[i+m][j+m]) </span><br><span class="line"> &#123;</span><br><span class="line"> sum++;</span><br><span class="line"> &#125;</span><br><span class="line"> m++;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">30</span>;i++)<span class="comment">//左下到右上 </span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">50</span>;j++)</span><br><span class="line">    &#123;m=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i-m&gt;<span class="number">-1</span>&amp;&amp;m+j!=<span class="number">50</span>)</span><br><span class="line">    &#123;<span class="keyword">if</span>(shuzu[i][j]!=shuzu[i-m][j+m]) </span><br><span class="line"> &#123;</span><br><span class="line">sum++;</span><br><span class="line"> &#125;</span><br><span class="line">m++;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> cout&lt;&lt;sum&lt;&lt;endl; </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>等差素数列</title>
      <link href="/2023/01/15/%E7%AD%89%E5%B7%AE%E7%B4%A0%E6%95%B0%E5%88%97/"/>
      <url>/2023/01/15/%E7%AD%89%E5%B7%AE%E7%B4%A0%E6%95%B0%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="等差素数列"><a href="#等差素数列" class="headerlink" title="等差素数列"></a>等差素数列</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><strong>本题为填空题，只需要算出结果后，在代码中使用输出语句将所填结果输出即可。</strong></p><p>2,3,5,7,11,13,….2,3,5,7,11,13,…. 是素数序列。 类似：7,37,67,97,127,1577,37,67,97,127,157 这样完全由素数组成的等差数列，叫等差素数数列。</p><p>上边的数列公差为 3030，长度为 66。</p><p>20042004 年，格林与华人陶哲轩合作证明了：存在任意长度的素数等差数列。 这是数论领域一项惊人的成果！</p><p>有这一理论为基础，请你借助手中的计算机，满怀信心地搜索：</p><p>长度为 1010 的等差素数列，其公差最小值是多少？</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><p>很暴力，就是简单的枚举</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span> </span></span><br><span class="line"> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"> <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sushu</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">1</span> || a==<span class="number">2</span> || a==<span class="number">3</span>)    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">2</span>;j&lt;=<span class="built_in">sqrt</span>(a);j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a%j==<span class="number">0</span>)    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"><span class="comment">//有那么十个数 这是个数字除了他们自己和他本身无其他因数</span></span><br><span class="line"><span class="comment">//并且还是等差数列</span></span><br><span class="line"></span><br><span class="line">vector &lt;<span class="type">int</span>&gt;mem;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;<span class="number">1000</span>;i++)<span class="comment">//首元素 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">sushu</span>(i)) <span class="comment">//如果第一个元素是素数的话 </span></span><br><span class="line">&#123;</span><br><span class="line">array.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="type">int</span> top,D;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;array.<span class="built_in">size</span>();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> d=<span class="number">1</span>;d&lt;<span class="number">500</span>;d++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">sushu</span>(array[i]+d)&amp;&amp;<span class="built_in">sushu</span>(array[i]+<span class="number">2</span>*d)&amp;&amp;<span class="built_in">sushu</span>(array[i]+<span class="number">3</span>*d)&amp;&amp;<span class="built_in">sushu</span>(array[i]+<span class="number">4</span>*d)&amp;&amp;<span class="built_in">sushu</span>(array[i]+<span class="number">5</span>*d)&amp;&amp;<span class="built_in">sushu</span>(array[i]+<span class="number">6</span>*d)&amp;&amp;<span class="built_in">sushu</span>(array[i]+<span class="number">7</span>*d)&amp;&amp;<span class="built_in">sushu</span>(array[i]+<span class="number">8</span>*d)&amp;&amp;<span class="built_in">sushu</span>(array[i]+<span class="number">9</span>*d))</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;首元素是&quot;</span>&lt;&lt;array[i]&lt;&lt;endl;top=array[i];</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;公差是&quot;</span>&lt;&lt;d&lt;&lt;endl;D=d;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;top+i*D&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>等差数列</title>
      <link href="/2023/01/15/%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97/"/>
      <url>/2023/01/15/%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="等差数列"><a href="#等差数列" class="headerlink" title="等差数列"></a>等差数列</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>数学老师给小明出了一道等差数列求和的题目。但是粗心的小明忘记了一 部分的数列，只记得其中 NN 个整数。</p><p>现在给出这 NN 个整数，小明想知道包含这 NN 个整数的最短的等差数列有几项？</p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入的第一行包含一个整数 NN。</p><p>第二行包含 NN 个整数 A_1,A_2,··· ,A_NA1,A2,⋅⋅⋅,AN。(注意 A_1A1 ∼ A_NAN 并不一定是按等差数列中的顺序给出)</p><p>其中，2 \leq N \leq 10^5，0 \leq A_i \leq 10^92≤N≤105，0≤Ai≤109。</p><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一个整数表示答案。</p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote><p>输入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">2 6 4 10 20</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>样例说明： 包含 2、6、4、10、20 的最短的等差数列是 2、4、6、8、10、12、14、16、 18、20。</p></blockquote><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><ul><li>最大运行时间：1s</li><li>最大运行内存: 256M</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//这个题目需要排个序 遍历整个数组  找到相邻的最小公差  </span></span><br><span class="line"><span class="comment">//然后从最小值加多少个这个最小公差才能到达这个结果 </span></span><br><span class="line">  <span class="type">int</span> N;<span class="type">int</span> m;</span><br><span class="line">  cin&gt;&gt;N;</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt;array;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">  &#123;</span><br><span class="line">  </span><br><span class="line">  cin&gt;&gt;m;</span><br><span class="line">  array.<span class="built_in">push_back</span>(m);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">sort</span>(array.<span class="built_in">begin</span>(),array.<span class="built_in">end</span>());<span class="comment">//排序</span></span><br><span class="line">  <span class="keyword">if</span>(N==<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  cout&lt;&lt;<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="type">int</span> min_1=array[<span class="number">1</span>]-array[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N<span class="number">-1</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  min_1=<span class="built_in">min</span>(min_1,array[i+<span class="number">1</span>]-array[i]);</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">if</span>(min_1==<span class="number">0</span>)<span class="comment">//如果公差是0，直接输出N结束 </span></span><br><span class="line">  &#123;</span><br><span class="line">  cout&lt;&lt;N;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="type">int</span> sum=(array[N<span class="number">-1</span>]-array[<span class="number">0</span>])/min_1  +<span class="number">1</span>;</span><br><span class="line">    cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单词分析</title>
      <link href="/2023/01/15/%E5%8D%95%E8%AF%8D%E5%88%86%E6%9E%90/"/>
      <url>/2023/01/15/%E5%8D%95%E8%AF%8D%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="单词分析"><a href="#单词分析" class="headerlink" title="单词分析"></a>单词分析</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>小蓝正在学习一门神奇的语言，这门语言中的单词都是由小写英文字母组 成，有些单词很长，远远超过正常英文单词的长度。小蓝学了很长时间也记不住一些单词，他准备不再完全记忆这些单词，而是根据单词中哪个字母出现得最多来分辨单词。</p><p>现在，请你帮助小蓝，给了一个单词后，帮助他找到出现最多的字母和这 个字母出现的次数。</p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入一行包含一个单词，单词只由小写英文字母组成。</p><p>对于所有的评测用例，输入的单词长度不超过 1000。</p><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出两行，第一行包含一个英文字母，表示单词中出现得最多的字母是哪 个。如果有多个字母出现的次数相等，输出字典序最小的那个。</p><p>第二行包含一个整数，表示出现得最多的那个字母在单词中出现的次数。</p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><blockquote><p>输入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lanqiao</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h4><blockquote><p>输入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">longlonglongistoolong</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">o</span><br><span class="line">6</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><ul><li>最大运行时间：1s</li><li>最大运行内存: 256M</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>思路：用哈希表存储每个字母出现的次数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 哈希表</span></span><br><span class="line">  string s1;</span><br><span class="line">  cin&gt;&gt;s1;</span><br><span class="line">  <span class="type">int</span> hash[<span class="number">26</span>]=&#123;<span class="number">0</span>&#125;;<span class="comment">//小写字母 的ascii码为97</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s1.<span class="built_in">size</span>();i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">int</span> s=s1[i];</span><br><span class="line">    hash[s<span class="number">-97</span>]++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> max_xiabiao=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(hash[i]&gt;max)</span><br><span class="line">    &#123;</span><br><span class="line">      max=hash[i];</span><br><span class="line">      max_xiabiao=i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="type">char</span> answer=max_xiabiao+<span class="number">97</span>;</span><br><span class="line">   cout&lt;&lt;answer&lt;&lt;endl;</span><br><span class="line">   cout&lt;&lt;max;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
